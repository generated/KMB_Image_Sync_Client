<?xml version="1.0" encoding="utf-8"?>
<wsdl:definitions xmlns:wsap="http://schemas.xmlsoap.org/ws/2004/08/addressing/policy" xmlns:wsa10="http://www.w3.org/2005/08/addressing" xmlns:tns="http://www.picturepark.com" xmlns:msc="http://schemas.microsoft.com/ws/2005/12/wsdl/contract" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsx="http://schemas.xmlsoap.org/ws/2004/09/mex" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.picturepark.com" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <xsd:schema targetNamespace="http://www.picturepark.com/Imports">
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd0" namespace="http://www.picturepark.com" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd2" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd1" namespace="http://schemas.microsoft.com/2003/10/Serialization/" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd3" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.User" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd4" namespace="http://schemas.datacontract.org/2004/07/VIT.Common.DataContract" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd5" namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd6" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.Asset" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd7" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.LogicalOperation" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd8" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.ComparisonOperation" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd9" namespace="http://schemas.datacontract.org/2004/07/System" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd10" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.Configuration" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd11" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.AssetContainer" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd12" namespace="http://schemas.datacontract.org/2004/07/VIT.Common.AvRendering.DataContract" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd13" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.Facet" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd14" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.WorldPort" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd15" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.Publisher" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd16" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.Communication" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd17" namespace="http://schemas.datacontract.org/2004/07/PP.Common.DataContract.UserGroup" />
      <xsd:import schemaLocation="http://facade-ch02.picturepark.com/ExtendedPublicService.svc?xsd=xsd18" namespace="http://schemas.microsoft.com/Message" />
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="IExtendedPublicService_GetAssets_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssets" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssets_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssets_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q1="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q1:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetsByIds_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetsByIds" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetsByIds_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetsByIdsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetsByIds_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q2="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q2:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_Download_InputMessage">
    <wsdl:part name="parameters" element="tns:Download" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_Download_OutputMessage">
    <wsdl:part name="parameters" element="tns:DownloadResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_Download_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q3="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q3:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_DownloadExtended_InputMessage">
    <wsdl:part name="parameters" element="tns:DownloadExtended" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_DownloadExtended_OutputMessage">
    <wsdl:part name="parameters" element="tns:DownloadExtendedResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_DownloadExtended_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q4="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q4:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetMetadata_InputMessage">
    <wsdl:part name="parameters" element="tns:GetMetadata" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetMetadata_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetMetadataResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetMetadata_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q5="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q5:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetsMetadata_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetsMetadata" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetsMetadata_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetsMetadataResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetsMetadata_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q6="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q6:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetFacets_InputMessage">
    <wsdl:part name="parameters" element="tns:GetFacets" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetFacets_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetFacetsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetFacets_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q7="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q7:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssets2_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssets2" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssets2_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssets2Response" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssets2_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q8="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q8:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetVersions_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetVersions" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetVersions_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetVersionsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetVersions_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q9="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q9:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetDerivatives_InputMessage">
    <wsdl:part name="parameters" element="tns:GetDerivatives" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetDerivatives_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetDerivativesResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetDerivatives_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q10="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q10:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetContainers_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetContainers" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetContainers_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetContainersResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetContainers_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q11="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q11:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateSession_InputMessage">
    <wsdl:part name="parameters" element="tns:CreateSession" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateSession_OutputMessage">
    <wsdl:part name="parameters" element="tns:CreateSessionResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateSession_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q12="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q12:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_Login_InputMessage">
    <wsdl:part name="parameters" element="tns:Login" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_Login_OutputMessage">
    <wsdl:part name="parameters" element="tns:LoginResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_Login_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q13="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q13:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_LoginWithSecurityToken_InputMessage">
    <wsdl:part name="parameters" element="tns:LoginWithSecurityToken" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_LoginWithSecurityToken_OutputMessage">
    <wsdl:part name="parameters" element="tns:LoginWithSecurityTokenResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_LoginWithSecurityToken_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q14="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q14:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetSecurityToken_InputMessage">
    <wsdl:part name="parameters" element="tns:GetSecurityToken" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetSecurityToken_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetSecurityTokenResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetSecurityToken_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q15="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q15:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RenewSession_InputMessage">
    <wsdl:part name="parameters" element="tns:RenewSession" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RenewSession_OutputMessage">
    <wsdl:part name="parameters" element="tns:RenewSessionResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RenewSession_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q16="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q16:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_IsValid_InputMessage">
    <wsdl:part name="parameters" element="tns:IsValid" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_IsValid_OutputMessage">
    <wsdl:part name="parameters" element="tns:IsValidResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_IsValid_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q17="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q17:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetConfiguration_InputMessage">
    <wsdl:part name="parameters" element="tns:GetConfiguration" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetConfiguration_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetConfigurationResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetConfiguration_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q18="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q18:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetConfigurationModificationDate_InputMessage">
    <wsdl:part name="parameters" element="tns:GetConfigurationModificationDate" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetConfigurationModificationDate_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetConfigurationModificationDateResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetConfigurationModificationDate_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q19="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q19:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetContentLanguages_InputMessage">
    <wsdl:part name="parameters" element="tns:GetContentLanguages" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetContentLanguages_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetContentLanguagesResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetContentLanguages_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q20="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q20:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetFields_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetFields" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetFields_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetFieldsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetFields_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q21="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q21:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetLanguageConfiguration_InputMessage">
    <wsdl:part name="parameters" element="tns:GetLanguageConfiguration" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetLanguageConfiguration_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetLanguageConfigurationResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetLanguageConfiguration_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q22="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q22:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetFacetConfigurationExtended_InputMessage">
    <wsdl:part name="parameters" element="tns:GetFacetConfigurationExtended" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetFacetConfigurationExtended_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetFacetConfigurationExtendedResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetFacetConfigurationExtended_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q23="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q23:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetSubscriptionInfo_InputMessage">
    <wsdl:part name="parameters" element="tns:GetSubscriptionInfo" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetSubscriptionInfo_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetSubscriptionInfoResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetSubscriptionInfo_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q24="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q24:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_ConfirmSubscriptionInfoReceived_InputMessage">
    <wsdl:part name="parameters" element="tns:ConfirmSubscriptionInfoReceived" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_ConfirmSubscriptionInfoReceived_OutputMessage">
    <wsdl:part name="parameters" element="tns:ConfirmSubscriptionInfoReceivedResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_ConfirmSubscriptionInfoReceived_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q25="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q25:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetLinksById_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetLinksById" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetLinksById_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetLinksByIdResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetLinksById_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q26="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q26:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_AddAssetVersions_InputMessage">
    <wsdl:part name="parameters" element="tns:AddAssetVersions" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_AddAssetVersions_OutputMessage">
    <wsdl:part name="parameters" element="tns:AddAssetVersionsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_AddAssetVersions_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q27="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q27:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssets_InputMessage">
    <wsdl:part name="parameters" element="tns:RemoveAssets" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssets_OutputMessage">
    <wsdl:part name="parameters" element="tns:RemoveAssetsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssets_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q28="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q28:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetDerivativeRights_InputMessage">
    <wsdl:part name="parameters" element="tns:GetDerivativeRights" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetDerivativeRights_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetDerivativeRightsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetDerivativeRights_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q29="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q29:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetRights_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetRights" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetRights_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetRightsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetRights_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q30="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q30:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_ImportSingleAsset_InputMessage">
    <wsdl:part name="parameters" element="tns:ImportSingleAsset" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_ImportSingleAsset_OutputMessage">
    <wsdl:part name="parameters" element="tns:ImportSingleAssetResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_ImportSingleAsset_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q31="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q31:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssetVersions_InputMessage">
    <wsdl:part name="parameters" element="tns:RemoveAssetVersions" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssetVersions_OutputMessage">
    <wsdl:part name="parameters" element="tns:RemoveAssetVersionsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssetVersions_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q32="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q32:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveDerivativeRights_InputMessage">
    <wsdl:part name="parameters" element="tns:SaveDerivativeRights" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveDerivativeRights_OutputMessage">
    <wsdl:part name="parameters" element="tns:SaveDerivativeRightsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveDerivativeRights_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q33="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q33:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveAssetsRights_InputMessage">
    <wsdl:part name="parameters" element="tns:SaveAssetsRights" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveAssetsRights_OutputMessage">
    <wsdl:part name="parameters" element="tns:SaveAssetsRightsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveAssetsRights_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q34="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q34:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetMetadata_InputMessage">
    <wsdl:part name="parameters" element="tns:UpdateAssetMetadata" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetMetadata_OutputMessage">
    <wsdl:part name="parameters" element="tns:UpdateAssetMetadataResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetMetadata_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q35="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q35:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateOriginalDerivative_InputMessage">
    <wsdl:part name="parameters" element="tns:UpdateOriginalDerivative" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateOriginalDerivative_OutputMessage">
    <wsdl:part name="parameters" element="tns:UpdateOriginalDerivativeResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateOriginalDerivative_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q36="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q36:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateRenderingJob_InputMessage">
    <wsdl:part name="parameters" element="tns:CreateRenderingJob" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateRenderingJob_OutputMessage">
    <wsdl:part name="parameters" element="tns:CreateRenderingJobResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateRenderingJob_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q37="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q37:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveDerivative_InputMessage">
    <wsdl:part name="parameters" element="tns:SaveDerivative" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveDerivative_OutputMessage">
    <wsdl:part name="parameters" element="tns:SaveDerivativeResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveDerivative_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q38="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q38:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_DeleteDerivative_InputMessage">
    <wsdl:part name="parameters" element="tns:DeleteDerivative" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_DeleteDerivative_OutputMessage">
    <wsdl:part name="parameters" element="tns:DeleteDerivativeResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_DeleteDerivative_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q39="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q39:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_AddAssets2AssetContainers_InputMessage">
    <wsdl:part name="parameters" element="tns:AddAssets2AssetContainers" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_AddAssets2AssetContainers_OutputMessage">
    <wsdl:part name="parameters" element="tns:AddAssets2AssetContainersResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_AddAssets2AssetContainers_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q40="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q40:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssetsFromAssetContainers_InputMessage">
    <wsdl:part name="parameters" element="tns:RemoveAssetsFromAssetContainers" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssetsFromAssetContainers_OutputMessage">
    <wsdl:part name="parameters" element="tns:RemoveAssetsFromAssetContainersResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssetsFromAssetContainers_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q41="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q41:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetsMetadata_InputMessage">
    <wsdl:part name="parameters" element="tns:UpdateAssetsMetadata" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetsMetadata_OutputMessage">
    <wsdl:part name="parameters" element="tns:UpdateAssetsMetadataResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetsMetadata_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q42="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q42:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateAssetContainer_InputMessage">
    <wsdl:part name="parameters" element="tns:CreateAssetContainer" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateAssetContainer_OutputMessage">
    <wsdl:part name="parameters" element="tns:CreateAssetContainerResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateAssetContainer_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q43="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q43:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetContainer_InputMessage">
    <wsdl:part name="parameters" element="tns:UpdateAssetContainer" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetContainer_OutputMessage">
    <wsdl:part name="parameters" element="tns:UpdateAssetContainerResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetContainer_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q44="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q44:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveAssetContainerRights_InputMessage">
    <wsdl:part name="parameters" element="tns:SaveAssetContainerRights" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveAssetContainerRights_OutputMessage">
    <wsdl:part name="parameters" element="tns:SaveAssetContainerRightsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_SaveAssetContainerRights_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q45="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q45:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetContainerRights_InputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetContainerRights" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetContainerRights_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetAssetContainerRightsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetAssetContainerRights_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q46="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q46:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetTotalAssets_InputMessage">
    <wsdl:part name="parameters" element="tns:GetTotalAssets" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetTotalAssets_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetTotalAssetsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetTotalAssets_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q47="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q47:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssetContainer_InputMessage">
    <wsdl:part name="parameters" element="tns:RemoveAssetContainer" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssetContainer_OutputMessage">
    <wsdl:part name="parameters" element="tns:RemoveAssetContainerResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveAssetContainer_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q48="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q48:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_MoveAssetContainer_InputMessage">
    <wsdl:part name="parameters" element="tns:MoveAssetContainer" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_MoveAssetContainer_OutputMessage">
    <wsdl:part name="parameters" element="tns:MoveAssetContainerResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_MoveAssetContainer_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q49="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q49:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetFieldSetIdByFieldName_InputMessage">
    <wsdl:part name="parameters" element="tns:GetFieldSetIdByFieldName" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetFieldSetIdByFieldName_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetFieldSetIdByFieldNameResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetFieldSetIdByFieldName_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q50="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q50:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateFieldSetDefaultValue_InputMessage">
    <wsdl:part name="parameters" element="tns:UpdateFieldSetDefaultValue" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateFieldSetDefaultValue_OutputMessage">
    <wsdl:part name="parameters" element="tns:UpdateFieldSetDefaultValueResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateFieldSetDefaultValue_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q51="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q51:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateUser_InputMessage">
    <wsdl:part name="parameters" element="tns:CreateUser" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateUser_OutputMessage">
    <wsdl:part name="parameters" element="tns:CreateUserResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateUser_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q52="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q52:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetUserById_InputMessage">
    <wsdl:part name="parameters" element="tns:GetUserById" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetUserById_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetUserByIdResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetUserById_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q53="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q53:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetUsers_InputMessage">
    <wsdl:part name="parameters" element="tns:GetUsers" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetUsers_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetUsersResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetUsers_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q54="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q54:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveUsers_InputMessage">
    <wsdl:part name="parameters" element="tns:RemoveUsers" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveUsers_OutputMessage">
    <wsdl:part name="parameters" element="tns:RemoveUsersResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_RemoveUsers_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q55="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q55:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateUser_InputMessage">
    <wsdl:part name="parameters" element="tns:UpdateUser" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateUser_OutputMessage">
    <wsdl:part name="parameters" element="tns:UpdateUserResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateUser_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q56="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q56:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetRights_InputMessage">
    <wsdl:part name="parameters" element="tns:GetRights" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetRights_OutputMessage">
    <wsdl:part name="parameters" element="tns:GetRightsResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_GetRights_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q57="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q57:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateTraceJob_InputMessage">
    <wsdl:part name="parameters" element="tns:CreateTraceJob" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateTraceJob_OutputMessage">
    <wsdl:part name="parameters" element="tns:CreateTraceJobResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateTraceJob_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q58="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q58:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UploadFile_InputMessage">
    <wsdl:part name="parameters" element="tns:UploadFile" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UploadFile_OutputMessage">
    <wsdl:part name="parameters" element="tns:UploadFileResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UploadFile_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q59="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q59:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UploadFirstChunk_InputMessage">
    <wsdl:part name="parameters" element="tns:UploadFirstChunk" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UploadFirstChunk_OutputMessage">
    <wsdl:part name="parameters" element="tns:UploadFirstChunkResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UploadFirstChunk_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q60="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q60:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UploadChunk_InputMessage">
    <wsdl:part name="parameters" element="tns:UploadChunk" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UploadChunk_OutputMessage">
    <wsdl:part name="parameters" element="tns:UploadChunkResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UploadChunk_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q61="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q61:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateAssetLink_InputMessage">
    <wsdl:part name="parameters" element="tns:CreateAssetLink" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateAssetLink_OutputMessage">
    <wsdl:part name="parameters" element="tns:CreateAssetLinkResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_CreateAssetLink_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q62="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q62:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetLinks_InputMessage">
    <wsdl:part name="parameters" element="tns:UpdateAssetLinks" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetLinks_OutputMessage">
    <wsdl:part name="parameters" element="tns:UpdateAssetLinksResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_UpdateAssetLinks_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q63="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q63:PictureparkFault" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_DeleteAssetLinks_InputMessage">
    <wsdl:part name="parameters" element="tns:DeleteAssetLinks" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_DeleteAssetLinks_OutputMessage">
    <wsdl:part name="parameters" element="tns:DeleteAssetLinksResponse" />
  </wsdl:message>
  <wsdl:message name="IExtendedPublicService_DeleteAssetLinks_PictureparkFaultFault_FaultMessage">
    <wsdl:part xmlns:q64="http://schemas.datacontract.org/2004/07/PP.Common.DataContract" name="detail" element="q64:PictureparkFault" />
  </wsdl:message>
  <wsdl:portType name="IExtendedPublicService">
    <wsdl:operation name="GetAssets">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get an &lt;see cref="T:DataContract.Asset.AssetItemCollection" /&gt; as defined by extendedAssetFilter&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="extendedAssetFilter"&gt;The extendedAssetFilter allows the definition of many additional parameters.&lt;/param&gt;
            &lt;returns&gt;Returns an AssetItemCollection.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssets&lt;/c&gt;
            &lt;code&gt;// Get all assets sorted by asset id ascending.
            // See the general API docu overview for further examples!
            .
            List&amp;lt;SortInfo&amp;gt; sortInfos = new List&amp;lt;SortInfo&amp;gt; { new SortInfo() { SortField = "AssetId", SortDirection = SortDirection.Asc }};
            ExtendedAssetFilter extendedAssetFilter = new ExtendedAssetFilter() { SortInfos = sortInfos };
            .
            AssetItemCollection assetItemCollection = PictureparkService.GetAssets(coreInfo, extendedAssetFilter);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssets" message="tns:IExtendedPublicService_GetAssets_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetsResponse" message="tns:IExtendedPublicService_GetAssets_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssets_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetAssetsByIds">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get an &lt;see cref="T:DataContract.Asset.AssetItemCollection" /&gt; as defined by the array of asset ids&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetIds"&gt;The int array of asset ids to be returned.&lt;/param&gt;
            &lt;param name="assetFilter"&gt;The assetFilter allows the definition of some additional parameters.&lt;/param&gt;
            &lt;returns&gt;Returns an AssetItemCollection.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssetsByIds&lt;/c&gt;
            &lt;code&gt;// Get an AssetItemCollection for assets 11,22,33,44.
            .
            AssetFilter assetFilter = new AssetFilter();
            List&amp;lt;int&amp;gt; assetIds      = new List&amp;lt;int&amp;gt; { 11, 33, 22, 44 };
            .
            AssetItemCollection assetItemCollection = PictureparkService.GetAssetsByIds(coreInfo, assetIds, assetFilter);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetsByIds" message="tns:IExtendedPublicService_GetAssetsByIds_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetsByIdsResponse" message="tns:IExtendedPublicService_GetAssetsByIds_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetsByIdsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssetsByIds_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="Download">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Download a collection of assets as defined by assetSelection&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetSelection"&gt;A list of &lt;see cref="T:DataContract.Asset.AssetSelection" /&gt; objects, which consists of AssetIds and DerivativeDefinitionIds.&lt;/param&gt;
            &lt;param name="downloadOptions"&gt;Defines the download options.&lt;/param&gt;
            &lt;returns&gt;Returns a Download object.&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; EmptyDownloadArray&lt;/c&gt; is thrown, if there is not at least one download item.&lt;/para&gt;
            &lt;para&gt; Exception &lt;c&gt;No access to AssetId: {AssetId}&lt;/c&gt; is thrown, if there are one or more not accessible assets in the download collection.&lt;/para&gt;
            &lt;para&gt; Exception &lt;c&gt;No access to AssetId: {AssetId} and DerivativeDefinitionId: {DerivativeDefinitionId}&lt;/c&gt;. Same as above for non accessible derivatives.&lt;/para&gt;
            &lt;para&gt; Exception &lt;c&gt;DownloadOptions.UserAction is not valid.&lt;/c&gt; is thrown in one of the following cases:&lt;/para&gt;
            &lt;para&gt;.  &amp;gt; downloadOptions.UserAction != UserAction.DerivativeDownload&lt;/para&gt;
            &lt;para&gt;.  &amp;gt; downloadOptions.UserAction != UserAction.DerivativeView&lt;/para&gt;
            &lt;para&gt;.  &amp;gt; downloadOptions.UserAction != UserAction.AssetReplication&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;Download&lt;/c&gt;
            &lt;code&gt;// Download 2 formats of asset 4 and 1 format of asset 6.
            .
            List&amp;lt;AssetSelection&amp;gt; assetSelection = new List&amp;lt;AssetSelection&amp;gt;();
            assetSelection.Add(new AssetSelection() {AssetId = 4, DerivativeDefinitionId = 2});
            assetSelection.Add(new AssetSelection() {AssetId = 4, DerivativeDefinitionId = 6});
            assetSelection.Add(new AssetSelection() {AssetId = 6, DerivativeDefinitionId = 7});
            .
            DownloadOptions downloadOptions = new DownloadOptions() 
            { 
            .  CreateZip4SingleFile = false,
            .  UsagePurpose         = "Just a test by the programmer",
            .  UserAction           = UserAction.DerivativeDownload
            };
            .
            Download download = PictureparkService.Download(coreInfo, assetSelection, downloadOptions);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/Download" message="tns:IExtendedPublicService_Download_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/DownloadResponse" message="tns:IExtendedPublicService_Download_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/DownloadPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_Download_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="DownloadExtended">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Download a collection of assets with additional options&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetSelection"&gt;A list of &lt;see cref="T:DataContract.Asset.AssetSelection" /&gt; objects, which consists of AssetIds and DerivativeDefinitionIds.&lt;/param&gt;
            &lt;param name="downloadOptions"&gt;Defines the download options.&lt;/param&gt;
            &lt;param name="createSingleDownload4MultipleFiles"&gt;
            &lt;para&gt;If true, a zipfile which contains all files is created on the server for download. You get ONE link to this zip file.&lt;/para&gt;
            &lt;para&gt;Otherwise you get one Link for each derivative.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="provideUniqueFileName"&gt;
            &lt;para&gt;If true, the system provides for a (pseudo) unique name for each derivative.&lt;/para&gt;
            &lt;para&gt;Depending on the download configuration of a particular Picturepark, each derivative normally has a unique name. If this is the case, the provideUniqueFileName-parameter is ignored.&lt;/para&gt;
            &lt;para&gt;But if for some reason identically named derivatives are downloaded as discrete files one by one, they would be overwritten by their namesakes.&lt;/para&gt;
            &lt;para&gt;In this case, if provideUniqueFileName is true, the system will append the derivative definition short name, e.g. "Internet" in order to create a (pseudo) unique file name.&lt;/para&gt;
            &lt;/param&gt;
            &lt;returns&gt;Returns a data type Dictionary&amp;lt;&lt;see cref="T:DataContract.Asset.Download" /&gt;, List&amp;lt;&lt;see cref="T:DataContract.Asset.AssetSelection" /&gt;&amp;gt;&amp;gt;.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;DownloadExtended&lt;/c&gt;
            &lt;code&gt;
            .
            List&amp;lt;AssetSelection&amp;gt; assetSelection = new List&amp;lt;AssetSelection&amp;gt;();
            assetSelection.Add(new AssetSelection() {AssetId = 4, DerivativeDefinitionId = 1});
            assetSelection.Add(new AssetSelection() {AssetId = 4, DerivativeDefinitionId = 6});
            assetSelection.Add(new AssetSelection() {AssetId = 6, DerivativeDefinitionId = 7});
            .
            DownloadOptions downloadOptions = new DownloadOptions() 
            { 
            .  CreateZip4SingleFile = false,
            .  UsagePurpose         = "Just a test by the programmer",
            .  UserAction           = UserAction.DerivativeDownload
            };
            .
            Dictionary&amp;lt;Download, List&amp;lt;AssetSelection&amp;gt;&amp;gt; download = PictureparkService.DownloadExtended(coreInfo, assetSelection, downloadOptions, createSingleDownload4MultipleFiles: true, provideUniqueFileName: true);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/DownloadExtended" message="tns:IExtendedPublicService_DownloadExtended_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/DownloadExtendedResponse" message="tns:IExtendedPublicService_DownloadExtended_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/DownloadExtendedPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_DownloadExtended_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetMetadata">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get &lt;see cref="T:DataContract.Asset.AssetMetadata" /&gt; of an asset&lt;/para&gt;
            &lt;para&gt;See also similar webservice &lt;see cref="M:GetAssetsMetadata()" /&gt;.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetId"&gt;The asset id.&lt;/param&gt;
            &lt;param name="updateStatistic"&gt;If true, the action is recorded in the statistics table.&lt;/param&gt;
            &lt;param name="businessProcessId"&gt;Optional. Not needed by integrators.&lt;/param&gt;
            &lt;param name="businessProcessToken"&gt;Optional. Not needed by integrators.&lt;/param&gt;
            &lt;returns&gt;Returns the AssetMetadata for an asset.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetMetadata&lt;/c&gt;
            &lt;code&gt;// Get the metadata for asset 1000.
            .
            int assetId                 = 1000;
            bool updateStatistic        = true;
            int? businessProcessId      = null;
            string businessProcessToken = null;
            .
            AssetMetadata assetMetadata = PictureparkService.GetMetadata(coreInfo, assetId, updateStatistic, businessProcessId, businessProcessToken);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetMetadata" message="tns:IExtendedPublicService_GetMetadata_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetMetadataResponse" message="tns:IExtendedPublicService_GetMetadata_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetMetadataPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetMetadata_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetAssetsMetadata">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get a list of &lt;see cref="T:DataContract.Asset.AssetFieldValues" /&gt;&lt;/para&gt;
            &lt;para&gt;See also similar webservice &lt;see cref="M:GetMetadata()" /&gt;.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetIds"&gt;A list of asset ids.&lt;/param&gt;
            &lt;param name="fieldIds"&gt;A list of field ids.&lt;/param&gt;
            &lt;returns&gt;Returns a list of AssetFieldValues.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssetsMetadata&lt;/c&gt;
            &lt;code&gt;// Get field values 11,22,33,44 for assets 111,222,333.
            .
            List&amp;lt;int&amp;gt; assetIds = new List&amp;lt;int&amp;gt; { 111, 222, 333 };
            List&amp;lt;int&amp;gt; fieldIds = new List&amp;lt;int&amp;gt; { 11, 22, 33, 44 };
            .
            List&amp;lt;AssetFieldValues&amp;gt; assetFieldValues = PictureparkService.GetAssetsMetadata(coreInfo, assetIds, fieldIds);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetsMetadata" message="tns:IExtendedPublicService_GetAssetsMetadata_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetsMetadataResponse" message="tns:IExtendedPublicService_GetAssetsMetadata_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetsMetadataPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssetsMetadata_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetFacets">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get &lt;see cref="T:DataContract.Facet.FacetResults" /&gt;, which contains the structure of the left panel in the new UI.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="searchParameters"&gt;A list of &lt;see cref="T:DataContract.Facet.FacetSearchParameter" /&gt;.&lt;/param&gt;
            &lt;param name="selectedFacetValues"&gt;A list of &lt;see cref="T:DataContract.Facet.FacetValue" /&gt;, can be null.&lt;/param&gt;
            &lt;returns&gt;Returns FacetResults&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetFacets&lt;/c&gt;
            &lt;code&gt;// Get facets for "Facet2" for the first 50 assets
            .
            FacetConfigurationExtended extendedFacetConfiguration = PictureparkService.GetFacetConfigurationExtended(coreInfo, "Facet2");
            ExtendedAssetFilter initialAssetFilter                = extendedFacetConfiguration.InitialAssetFilter;
            initialAssetFilter.StartRow                           = 0;
            initialAssetFilter.Limit                              = 50;
            .
            List&amp;lt;FacetSearchParameter&amp;gt; facetSearchParameters = new List&amp;lt;FacetSearchParameter&amp;gt;();
            .
            FacetSearchParameter facetSearchParameter = new FacetSearchParameter()
            {
              FacetConfigurationId = extendedFacetConfiguration.FacetConfigurationId,
              SearchFilter         = initialAssetFilter,
              FieldIdsOfFacets     = extendedFacetConfiguration.FieldIds
            };
            facetSearchParameters.Add(facetSearchParameter);
            .
            FacetResults facetResults = PictureparkService.GetFacets(coreInfo, facetSearchParameters, null);
            facetResults.writeUnitTestResultToXml&amp;lt;FacetResults&amp;gt;("FacetResults.xml");
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetFacets" message="tns:IExtendedPublicService_GetFacets_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetFacetsResponse" message="tns:IExtendedPublicService_GetFacets_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetFacetsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetFacets_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetAssets2">
      <wsdl:documentation>&lt;summary&gt;
            Get a collection of those &lt;see cref="T:DataContract.WorldPort.PortAssetItem" /&gt;s which match an active facet
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetFilter"&gt;An asset filter.&lt;/param&gt;
            &lt;returns&gt;A collection of asset items.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssets2&lt;/c&gt;
            &lt;code&gt;// Get the first 50 assets which match the facet "Facet2"
            .
            FacetConfigurationExtended extendedFacetConfiguration = PictureparkService.GetFacetConfigurationExtended(coreInfo, "Facet2");
            ExtendedAssetFilter extendedAssetFilter               = extendedFacetConfiguration.InitialAssetFilter;
            extendedAssetFilter.StartRow                          = 0;
            extendedAssetFilter.Limit                             = 50;
            .
            PortAssetItemCollection portAssetItemCollection = PictureparkService.GetAssets2(coreInfo, extendedAssetFilter);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssets2" message="tns:IExtendedPublicService_GetAssets2_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssets2Response" message="tns:IExtendedPublicService_GetAssets2_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssets2PictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssets2_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetAssetVersions">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get asset &lt;see cref="T:DataContract.Asset.AssetVersion" /&gt;s&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetId"&gt;The asset id.&lt;/param&gt;
            &lt;param name="assetFilter"&gt;An asset filter, may be empty.&lt;/param&gt;
            &lt;returns&gt;A list of &lt;see cref="T:DataContract.Asset.AssetVersion" /&gt;s.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssetVersions&lt;/c&gt;
            &lt;code&gt; // Get asset versions for asset 45
            .
            int assetId = 45;
            AssetFilter assetFilter = new AssetFilter();
            .
            List&amp;lt;AssetVersion&amp;gt; assetVersions = PictureparkService.GetAssetVersions(coreInfo, assetId, assetFilter);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetVersions" message="tns:IExtendedPublicService_GetAssetVersions_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetVersionsResponse" message="tns:IExtendedPublicService_GetAssetVersions_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetAssetVersionsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssetVersions_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetDerivatives">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get certain &lt;see cref="T:DataContract.Asset.Derivative" /&gt;s for one or more assets&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetSelection"&gt;A list of &lt;see cref="T:DataContract.Asset.AssetSelection" /&gt;s.&lt;/param&gt;
            &lt;returns&gt;A list of &lt;see cref="T:DataContract.Asset.ExtendedDerivative" /&gt;s.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetDerivatives&lt;/c&gt;
            &lt;code&gt;// Get certain derivatives for asset 550 and 551
            .
            List&amp;lt;AssetSelection&amp;gt; assetSelections = new List&amp;lt;AssetSelection&amp;gt;();
            assetSelections.Add(new AssetSelection() { AssetId = 550, DerivativeDefinitionId = 1 });
            assetSelections.Add(new AssetSelection() { AssetId = 550, DerivativeDefinitionId = 6 });
            assetSelections.Add(new AssetSelection() { AssetId = 551, DerivativeDefinitionId = 7 });
            .
            List&amp;lt;ExtendedDerivative&amp;gt; derivatives = PictureparkService.GetDerivatives(coreInfo, assetSelections);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetDerivatives" message="tns:IExtendedPublicService_GetDerivatives_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetDerivativesResponse" message="tns:IExtendedPublicService_GetDerivatives_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetService/GetDerivativesPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetDerivatives_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetAssetContainers">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get a list of &lt;see cref="T:DataContract.AssetContainer.AssetContainerItem" /&gt;s&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="parentAssetContainerId"&gt;The id of the AssetContainer (category or asset class) for which the children are to be returned.&lt;/param&gt;
            &lt;param name="assetContainerType"&gt;
            &lt;para&gt;Optional. Either Category or AssetClass.&lt;/para&gt;
            &lt;code&gt;AssetContainerType? assetContainerType = AssetContainerType.AssetClass;&lt;/code&gt;
            &lt;/param&gt;
            &lt;param name="openAssetContainerId"&gt;
            &lt;para&gt;Optional. This parameter is needed in order to display the opened part of a category branch.&lt;/para&gt;
            &lt;para&gt;You define a parent id (a) and an openedAssetContainerId (aaaa) below the parent and you will get the nodes on the line of descendants &lt;c&gt;(a, aa, aaa, aaaa) plus all siblings&lt;/c&gt; of these nodes:&lt;/para&gt;
            &lt;para&gt;&lt;c&gt;a&lt;/c&gt; (Parent)&lt;/para&gt;
            &lt;para&gt;&lt;c&gt;aa&lt;/c&gt; bb cc dd ee (Child aa plus siblings bb, cc ..)&lt;/para&gt;
            &lt;para&gt;&lt;c&gt;aaa&lt;/c&gt; bbb (Child aaa of aa plus siblings bbb ..)&lt;/para&gt;
            &lt;para&gt;&lt;c&gt;aaaa&lt;/c&gt; bbbb cccc (Child aaaa of aaa plus siblings bbbb, cccc..)&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="totalLayers"&gt;Number of layers (children, grand-children ..) to be returned. 1 = only the parentAssetContainerId is returned, 0 = all.&lt;/param&gt;
            &lt;param name="searchString"&gt;
            &lt;para&gt;Optional. If not empty, only asset containers with matching names and/or descriptions are returned.&lt;/para&gt;
            &lt;para&gt;Please note: there is always the complete line of parent nodes returned down to the matching nodes.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="desiredAssetContainerLanguage"&gt;
            &lt;para&gt;Optional. The language (1=german, 2=english, 3=french, 75=spanish, 140=italian, ..).&lt;/para&gt;
            &lt;code&gt;ApplicationLanguage? desiredAssetContainerLanguage = ApplicationLanguage.English;&lt;/code&gt;
            &lt;/param&gt;
            &lt;returns&gt;Returns a list of AssetContainerItems.&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt;Exception &lt;c&gt;AssetContainerTranslation for language {desiredAssetContainerLanguage} could not be found.&lt;/c&gt; is thrown if the submitted desiredAssetContainerLanguage is not found.&lt;/para&gt; 
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssetContainers&lt;/c&gt;
            &lt;code&gt;// Get all asset containers (categories and asset classes), which are in the parent container 120.
            .
            int parentAssetContainerId                        = 120;
            int? openAssetContainerId                         = null;
            AssetContainerType? assetContainerType            = null;
            int totalLayers                                   = 0;
            string searchString                               = null;
            ApplicationLanguage desiredAssetContainerLanguage = null;
            .
            List&amp;lt;AssetContainerItem&amp;gt; assetContainers = 
            .  PictureparkService.GetAssetContainers(coreInfo, parentAssetContainerId, assetContainerType, openAssetContainerId, totalLayers, searchString, desiredAssetContainerLanguage);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicAssetContainerService/GetAssetContainers" message="tns:IExtendedPublicService_GetAssetContainers_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicAssetContainerService/GetAssetContainersResponse" message="tns:IExtendedPublicService_GetAssetContainers_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicAssetContainerService/GetAssetContainersPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssetContainers_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="CreateSession">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Create a session&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="customerId"&gt;
            &lt;para&gt;The id of the customer (picturepark), e.g. 123.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="language"&gt;
            &lt;para&gt;The &lt;c&gt;ui language&lt;/c&gt;, e.g. "English" or "Norwegian".&lt;/para&gt;
            &lt;para&gt;This value is written to the session log and never used again for any other purposes. Neither is it returned in coreInfo.&lt;/para&gt;
            &lt;para&gt;After a user logs in, the language for this user is taken from the language defined for this user in the database.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="language4ContentId"&gt;
            &lt;para&gt;Optional. The id of the &lt;c&gt;content language&lt;/c&gt;.&lt;/para&gt;
            &lt;para&gt;The &lt;see cref="T:DataContract.Configuration.Language4Content" /&gt; is not a language, but a language configuration set, which defines the respective languages for metadata, asset containers and searching.&lt;/para&gt;
            &lt;para&gt;If null, the default language4contentId for this Picturepark is used for CreateSession.&lt;/para&gt;
            &lt;para&gt;As with the ui language, this value is written to the session log and never used again for any other purposes. Neither is it returned in coreInfo.&lt;/para&gt;
            &lt;para&gt;After a user logs in, the content language for this user is taken from the content language defined for this user in the database.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="aspNetSessionId"&gt;
            &lt;para&gt;Optional. The aspNetSessionId (if known), which enables the system to retrieve a lost session, e.g. in case of a browser reload.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="skin"&gt;
            &lt;para&gt;Optional. Available options: "SkinColor.Blue" and "SkinColor.Gray".&lt;/para&gt;
            &lt;code&gt;SkinColor? skin = SkinColor.Blue;&lt;/code&gt;
            &lt;/param&gt;
            &lt;param name="clientGuid"&gt;
            &lt;para&gt;The clientGuid must be provided by VIT or VIT partners, who will create the guid by registering the client with the server.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="httpContextRequestInfo"&gt;
            &lt;para&gt;Optional. These informations, which are needed for logging purposes, must be gathered and submitted only by the web ui.&lt;/para&gt;
            &lt;para&gt;In all other cases null should be submitted.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="traceJobId"&gt;
            &lt;para&gt;Optional. Only submit this parameter if the method call is part of a trace job. The traces within a trace job are pooled for special reporting capabilities.&lt;/para&gt;
            &lt;para&gt;To get a traceJobId, you must call the webservice &lt;c&gt;CreateTraceJob&lt;/c&gt;, which is only available in the extended public webservices.&lt;/para&gt;
            &lt;para&gt;Needed for tracing purposes only.&lt;/para&gt;
            &lt;/param&gt;
            &lt;returns&gt;Returns a CoreInfo object with the session data.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;CreateSession&lt;/c&gt;
            &lt;code&gt;// Create a session for customer 123.
            .
            int customerId                                = 123;
            ApplicationLanguage applicationLanguage       = ApplicationLanguage.English;
            int? contentLanguageId                        = null;
            string aspNetSessionId                        = null;
            SkinColor? skin                               = null;
            string clientGuid                             = "04515589-EDF0-F09B-80E0-B28AB0123B97";
            HttpContextRequestInfo httpContextRequestInfo = null;
            int? traceJobId                               = null;
            .
            CoreInfo coreInfo = PictureparkService.CreateSession(customerId, applicationLanguage, contentLanguageId, aspNetSessionId, skin, clientGuid, httpContextRequestInfo, traceJobId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicSessionService/CreateSession" message="tns:IExtendedPublicService_CreateSession_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicSessionService/CreateSessionResponse" message="tns:IExtendedPublicService_CreateSession_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicSessionService/CreateSessionPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_CreateSession_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="Login">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Log in&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;
            &lt;para&gt;The CoreInfo object which has been returned by &lt;see cref="M:CreateSession()" /&gt;.&lt;/para&gt;
            &lt;/param&gt;
            &lt;returns&gt;
            &lt;para&gt;Returns an object of type CoreInfo with the updated session data.&lt;/para&gt;
            &lt;para&gt;If successful, CoreInfo.User.LoginStatus is "&lt;c&gt;LoggedIn&lt;/c&gt;", otherwise the exception UserNotFound is thrown.&lt;/para&gt;
            &lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; UserNotFound&lt;/c&gt; is thrown if a user with this password is not found and none of the below listed cases apply.&lt;/para&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; DeletedUser&lt;/c&gt; is thrown if a user has been deleted.&lt;/para&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; ExpiredUser&lt;/c&gt; is thrown if a user has been expired.&lt;/para&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; LockedUser&lt;/c&gt; is thrown if a user has been locked (too many invalid login attempts).&lt;/para&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; RenewalExpiredUser&lt;/c&gt; is thrown if a user account has not been renewed in time.&lt;/para&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; DisapprovedUser&lt;/c&gt; is thrown if a user has been disapproved by an admin or a contact person.&lt;/para&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; UnconfirmedUser&lt;/c&gt; is thrown if a newly registered user failed to confirm his registration.&lt;/para&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; UserUnapproved&lt;/c&gt; is thrown if a user has not yet been confirmed by an admin or a contact person.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;Login&lt;/c&gt;
            &lt;code&gt;// Log in user "support@picturepark.ch" (you must first create a session).
            .
            coreInfo.User = new User
            {
            .  Email    = "support@picturepark.ch",
            .  Password = "easy2RememberAndDifficult2GuessButAlso2LongMayBe",
            .  Language = ApplicationLanguage.English
            };
            .
            // Logs in the specified user
            coreInfo = PictureparkService.Login(coreInfo);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicSessionService/Login" message="tns:IExtendedPublicService_Login_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicSessionService/LoginResponse" message="tns:IExtendedPublicService_Login_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicSessionService/LoginPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_Login_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="LoginWithSecurityToken">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Log in with a security token as a PAS (Picturepark Authentication Service) user&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;
            &lt;para&gt;The CoreInfo object which has been returned by &lt;see cref="M:CreateSession()" /&gt;.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="clientGuid"&gt;
            &lt;para&gt;The clientGuid must be provided by VIT or VIT partners, who will create the guid by registering the client with the server.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="securityToken"&gt;
            &lt;para&gt;The security token, which has been returned by &lt;see cref="M:GetSecurityToken()" /&gt;.&lt;/para&gt;
            &lt;/param&gt;
            &lt;returns&gt;Returns the updated CoreInfo object, which now contains the user data.&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; SecurityTokenExpired&lt;/c&gt; is thrown, if the token is not found.&lt;/para&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; SecurityTokenExpired&lt;/c&gt; is thrown, if a token is found, which is no more valid.&lt;/para&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; UserNotFound&lt;/c&gt; is thrown, if the user that is associated with the token is not found.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;LoginWithSecurityToken&lt;/c&gt;
            &lt;code&gt;// Log in with security token (you must first get a security token).
            .
            string ClientGuid    = "6ED2FBE4-F272-7E34-A216-23F961736729";
            string securityToken = PictureparkService.GetSecurityToken();
            .
            coreInfo = PictureparkService.LoginWithSecurityToken(coreInfo, clientGuid, securityToken); &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicSessionService/LoginWithSecurityToken" message="tns:IExtendedPublicService_LoginWithSecurityToken_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicSessionService/LoginWithSecurityTokenResponse" message="tns:IExtendedPublicService_LoginWithSecurityToken_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicSessionService/LoginWithSecurityTokenPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_LoginWithSecurityToken_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetSecurityToken">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get a security token, which is needed for &lt;see cref="M:LoginWithSecurityToken()" /&gt;&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="customerId"&gt;
            &lt;para&gt;The id of the customer (picturepark), e.g. 27.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="clientGuid"&gt;
            &lt;para&gt;The clientGuid must be provided by VIT or VIT partners, who will create the guid by registering the client with the server.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="authenticationUser"&gt;
            &lt;para&gt;The email address of the user, who serves to authenticate the connection.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="authenticationUserPassword"&gt;
            &lt;para&gt;The password of that user.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="emailAddress"&gt;
            &lt;para&gt;The email address of the (PAS) user, who will later log in from the publisher with the security token&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="userData"&gt;
            &lt;para&gt;&lt;see cref="T:DataContract.User.UserData" /&gt; for the user, who will later log in with the security token. Needed only if the PAS user does not yet exist, because in this case a new user account will be created for the PAS user.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="traceJobId"&gt;
            &lt;para&gt;Only submit this parameter if the method call is part of a trace job. The traces within a trace job are pooled for special reporting capabilities."&lt;/para&gt;
            &lt;para&gt;To get a traceJobId, you must call the webservice &lt;c&gt;CreateTraceJob&lt;/c&gt;, which is only available in the extended public webservices.&lt;/para&gt;
            &lt;para&gt;Needed for tracing purposes only.&lt;/para&gt;
            &lt;/param&gt;
            &lt;returns&gt;Returns a security token, which is a guid, e.g. "59fa91c1-73ea-46f0-b2ae-76c0457c7b16".&lt;/returns&gt;
            &lt;remarks&gt;
            The email and password of the PAS authenticationUser are usually stored in a web.config file.
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;GetSecurityToken&lt;/c&gt;
            &lt;code&gt;// Get a security token for authentication user "support@vit.ch" on behalf of "regula.huerlimann@switzerland.ch".
            // If the user does not exist, it will be created.
            .
            // Make sure to submit all required data (in this case including special field "FieldValues")
            // Required data depend on customer specific Picturepark configuration.
            .
            List&amp;lt;int&amp;gt; userGroupIds = new List&amp;lt;int&amp;gt; { 17, 3 };
            .
            UserData userData = new UserData()
            {
            .  EmailAddress = "regula.huerlimann@switzerland.ch",
            .  FieldValues  = new List&amp;lt;FieldValue&amp;gt;() {new FieldValue() {FieldId = 132, ValueString = "anything"}},
            .  FirstName    = "Regula",
            .  LanguageId   = (int)ApplicationLanguage.English,
            .  LastName     = "Huerlimann",
            .  UserGroupIds = userGroupIds
            };
            .
            int customerId                    = 123;
            string ClientGuid                 = "6ED2FBE4-F272-7E34-A216-23F961736729";
            string authenticationUser         = "support@vit.ch";
            string authenticationUserPassword = "kuckuck3107";
            string emailAddress               = userData.EmailAddress;
            int? traceJobId                   = null;
            .
            string securityToken = PictureparkService.GetSecurityToken(customerId, clientGuid, authenticationUser, authenticationUserPassword, emailAddress, userData, traceJobId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicSessionService/GetSecurityToken" message="tns:IExtendedPublicService_GetSecurityToken_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicSessionService/GetSecurityTokenResponse" message="tns:IExtendedPublicService_GetSecurityToken_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicSessionService/GetSecurityTokenPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetSecurityToken_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="RenewSession">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Renew a session (prevent a timeout)&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;
            &lt;para&gt;The CoreInfo object which has been returned by &lt;see cref="M:CreateSession()" /&gt;.&lt;/para&gt;
            &lt;/param&gt;
            &lt;returns&gt;The updated CoreInfo object.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;RenewSession&lt;/c&gt;
            &lt;code&gt;// Renew this session (prevent timeout).
            .
            PictureparkService.RenewSession(coreInfo);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicSessionService/RenewSession" message="tns:IExtendedPublicService_RenewSession_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicSessionService/RenewSessionResponse" message="tns:IExtendedPublicService_RenewSession_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicSessionService/RenewSessionPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_RenewSession_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="IsValid">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Check the validity of a session&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;
            &lt;para&gt;The CoreInfo object which has been returned by &lt;see cref="M:CreateSession()" /&gt;.&lt;/para&gt;
            &lt;/param&gt;
            &lt;returns&gt;True or false&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;IsValid&lt;/c&gt;
            &lt;code&gt;// Check validity of this session (includes session renewal).
            .
            bool isValid = PictureparkService.IsValid(coreInfo);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicSessionService/IsValid" message="tns:IExtendedPublicService_IsValid_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicSessionService/IsValidResponse" message="tns:IExtendedPublicService_IsValid_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicSessionService/IsValidPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_IsValid_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetConfiguration">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get the &lt;see cref="T:DataContract.Configuration.PublicConfiguration" /&gt; of the Picturepark&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;returns&gt;The PublicConfiguration.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetConfiguration&lt;/c&gt;
            &lt;code&gt;
            PublicConfiguration publicConfiguration = PictureparkService.GetConfiguration(coreInfo);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetConfiguration" message="tns:IExtendedPublicService_GetConfiguration_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetConfigurationResponse" message="tns:IExtendedPublicService_GetConfiguration_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetConfigurationPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetConfiguration_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetConfigurationModificationDate">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get the last modification date of the customer configuration&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;&lt;/param&gt;
            &lt;returns&gt;DateTimeOffset configurationModificationDate.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetConfigurationModificationDate&lt;/c&gt;
            &lt;code&gt;
            System.DateTimeOffset configurationModificationDate = PictureparkService.GetConfigurationModificationDate(coreInfo);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetConfigurationModificationDate" message="tns:IExtendedPublicService_GetConfigurationModificationDate_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetConfigurationModificationDateResponse" message="tns:IExtendedPublicService_GetConfigurationModificationDate_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetConfigurationModificationDatePictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetConfigurationModificationDate_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetContentLanguages">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get the list of &lt;see cref="T:DataContract.Configuration.Language4Content" /&gt; for this Picturepark&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="customerId"&gt;The customer id.&lt;/param&gt;
            &lt;returns&gt;A list of the content languages.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetContentLanguages&lt;/c&gt;
            &lt;code&gt;
            int customerId = 123;
            List&amp;lt;Language4Content&amp;gt; contentLanguages = PictureparkService.GetContentLanguages(customerId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetContentLanguages" message="tns:IExtendedPublicService_GetContentLanguages_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetContentLanguagesResponse" message="tns:IExtendedPublicService_GetContentLanguages_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetContentLanguagesPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetContentLanguages_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetAssetFields">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get a list of all asset &lt;see cref="T:DataContract.Configuration.Field" /&gt; definitions.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;returns&gt;Returns a list of asset field definitions.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssetFields&lt;/c&gt;
            &lt;code&gt;
            List&amp;lt;Field&amp;gt; assetFields = PictureparkService.GetAssetFields(coreInfo);&lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetAssetFields" message="tns:IExtendedPublicService_GetAssetFields_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetAssetFieldsResponse" message="tns:IExtendedPublicService_GetAssetFields_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetAssetFieldsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssetFields_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetLanguageConfiguration">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get the &lt;see cref="T:DataContract.Configuration.LanguageConfiguration" /&gt; for a user&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;returns&gt;The language configuration for the currently logged in user.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetLanguageConfiguration&lt;/c&gt;
            &lt;code&gt;// Get the language configuration for this Picturepark.
            .
            LanguageConfiguration languageConfiguration = PictureparkService.GetLanguageConfiguration(coreInfo);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetLanguageConfiguration" message="tns:IExtendedPublicService_GetLanguageConfiguration_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetLanguageConfigurationResponse" message="tns:IExtendedPublicService_GetLanguageConfiguration_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetLanguageConfigurationPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetLanguageConfiguration_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetFacetConfigurationExtended">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get the &lt;see cref="T:DataContract.Facet.FacetConfigurationExtended" /&gt; of a certain facet, usually needed for &lt;see cref="M:AssetService.GetFacets()" /&gt; and/or &lt;see cref="M:AssetService.GetAssets2()" /&gt;&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="name"&gt;The facet name.&lt;/param&gt;
            &lt;returns&gt;A facet configuration.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetFacetConfigurationExtended&lt;/c&gt;
            &lt;code&gt;// Get the facet configuration for "Facet2"
            string facetName = "Facet2";
            extendedFacetConfiguration = PictureparkService.GetFacetConfigurationExtended(coreInfo, facetName);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetFacetConfigurationExtended" message="tns:IExtendedPublicService_GetFacetConfigurationExtended_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetFacetConfigurationExtendedResponse" message="tns:IExtendedPublicService_GetFacetConfigurationExtended_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicConfigurationService/GetFacetConfigurationExtendedPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetFacetConfigurationExtended_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetSubscriptionInfo">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Returns a list of &lt;see cref="T:DataContract.UserActionHistoryInfo" /&gt; which is needed by the Event Subscription Service (ESS)&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="subscriptionActionId"&gt;The id of the subscription action.&lt;/param&gt;
            &lt;param name="distinct"&gt;Flag: return distinct values only.&lt;/param&gt;
            &lt;returns&gt;A &lt;see cref="T:DataContract.UserActionHistoryInfoCollection" /&gt;, which is a list of UserActionHistoryInfos for the subscriptionActionId&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetSubscriptionInfo&lt;/c&gt;
            &lt;code&gt;// Get subscription infos
            int subscriptionActionId = 2;
            bool distinct            = true;
            .
            UserActionHistoryInfoCollection subscriptionInfo = PictureparkService.GetSubscriptionInfo(coreInfo, subscriptionActionId, distinct);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicWorkflowService/GetSubscriptionInfo" message="tns:IExtendedPublicService_GetSubscriptionInfo_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicWorkflowService/GetSubscriptionInfoResponse" message="tns:IExtendedPublicService_GetSubscriptionInfo_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicWorkflowService/GetSubscriptionInfoPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetSubscriptionInfo_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="ConfirmSubscriptionInfoReceived">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Call directly after successfully receiving data from &lt;see cref="M:GetSubscriptionInfo()" /&gt; in order to delete the history.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="subscriptionActionId"&gt;The id of the subscription action.&lt;/param&gt;
            &lt;param name="batchGuid"&gt;The guid received from GetSubscriptionInfo&lt;/param&gt;
            &lt;returns&gt;A &lt;see cref="T:DataContract.UserActionHistoryInfoCollection" /&gt;, which is a list of UserActionHistoryInfos for the subscriptionActionId&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;ConfirmSubscriptionInfoReceived&lt;/c&gt;
            &lt;code&gt;// Delete the history entries by confirming the reception
            // When calling ConfirmSubscriptionInfoReceived() a NotificationDate is set and the info is not returned again.
            // subscriptionInfoAfter therefore should not contain the UserActionHistoryInfos of subscriptionInfoBefore
            .
            int subscriptionActionId = 2;
            bool distinct            = true;
            .
            UserActionHistoryInfoCollection subscriptionInfoBefore = PictureparkService.GetSubscriptionInfo(coreInfo, subscriptionActionId, distinct);
            PictureparkService.ConfirmSubscriptionInfoReceived(coreInfo, subscriptionActionId, subscriptionInfoBefore.BatchGuid);
            UserActionHistoryInfoCollection subscriptionInfoAfter = PictureparkService.GetSubscriptionInfo(coreInfo, subscriptionActionId, distinct);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicWorkflowService/ConfirmSubscriptionInfoReceived" message="tns:IExtendedPublicService_ConfirmSubscriptionInfoReceived_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicWorkflowService/ConfirmSubscriptionInfoReceivedResponse" message="tns:IExtendedPublicService_ConfirmSubscriptionInfoReceived_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicWorkflowService/ConfirmSubscriptionInfoReceivedPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_ConfirmSubscriptionInfoReceived_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetAssetLinksById">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get a list of assetlinks&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:SessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="businessProcessIds"&gt;A list of businessprocess ids.&lt;/param&gt;
            &lt;param name="startRow"&gt;Start row.&lt;/param&gt;
            &lt;param name="limit"&gt;Number of maximally returned itens.&lt;/param&gt;
            &lt;returns&gt;A list of assetlinks, a &lt;see cref="T:DataContract.Communication.BusinessProcessShort" /&gt; datatype.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssetLinksById&lt;/c&gt;
            &lt;code&gt;
            .
            List&amp;lt;int&amp;gt; businessProcessIds = new List&amp;lt;int&amp;gt; { 2, 4, 10, 11, 12 };
            int startRow = 0;
            int limit    = 100;
            .
            List&amp;lt;BusinessProcessShort&amp;gt; businessProcesses = PictureparkService.GetAssetLinksById(coreInfo, businessProcessIds, startRow, limit);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IPublicCommunicationService/GetAssetLinksById" message="tns:IExtendedPublicService_GetAssetLinksById_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IPublicCommunicationService/GetAssetLinksByIdResponse" message="tns:IExtendedPublicService_GetAssetLinksById_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IPublicCommunicationService/GetAssetLinksByIdPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssetLinksById_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="AddAssetVersions">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Add asset versions (currently: language version or slide)&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetVersions"&gt;
            &lt;para&gt;A list of &lt;see cref="T:DataContract.Asset.AssetVersion" /&gt;s.&lt;/para&gt;
            &lt;para&gt;There are currently two types of assetversions: languages and slides.&lt;/para&gt;
            &lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;:&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; EditVersions&lt;/c&gt; for all assets in the list;&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; EditVersions&lt;/c&gt; for all parent assets in the list.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;AddAssetVersions&lt;/c&gt;
            &lt;code&gt;// Create language versions for languages 2 and 3 (engl and french) for the (parent) asset 481.
            .
            List&amp;lt;AssetVersion&amp;gt; assetVersions = new List&amp;lt;AssetVersion&amp;gt;
            {
            .  new AssetVersion
            .  {
            .    Asset         = new AssetItem {AssetId = 483},
            .    ParentAssetId = 481,
            .    LanguageId    = 3,
            .    VersionTypeId = 1      // Version type "Language"
            .  },
            .  new AssetVersion
            .  {
            .    Asset         = new AssetItem {AssetId = 482},
            .    ParentAssetId = 481,
            .    LanguageId    = 2,
            .    VersionTypeId = 1
            .  }
            };
            .
            PictureparkService.AddAssetVersions(coreInfo, assetVersions);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/AddAssetVersions" message="tns:IExtendedPublicService_AddAssetVersions_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/AddAssetVersionsResponse" message="tns:IExtendedPublicService_AddAssetVersions_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/AddAssetVersionsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_AddAssetVersions_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="RemoveAssets">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Remove (delete) assets&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetIds"&gt;An array of asset ids.&lt;/param&gt;
            &lt;param name="deleteDependentAssets"&gt;
            &lt;para&gt;If true, asset versions depending on the deleted assets are also deleted.&lt;/para&gt;
            &lt;para&gt;Assets versions are currently either language versions or slides (belonging to a Powerpoint presentation).&lt;/para&gt;
            &lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;:&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; Delete&lt;/c&gt; for all assets.&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; Delete&lt;/c&gt; for all asset versions (if deleteDependentAssets = true).&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;RemoveAssets&lt;/c&gt;
            &lt;code&gt;// Delete assets 111, 222 and 333.
            .
            List&amp;lt;int&amp;gt; assetIds         = new List&amp;lt;int&amp;gt; {111, 222, 333};
            bool deleteDependentAssets = false;
            .
            PictureparkService.RemoveAssets(coreInfo, assetIds, deleteDependentAssets);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/RemoveAssets" message="tns:IExtendedPublicService_RemoveAssets_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/RemoveAssetsResponse" message="tns:IExtendedPublicService_RemoveAssets_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/RemoveAssetsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_RemoveAssets_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetDerivativeRights">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get a list of &lt;see cref="T:DataContract.Asset.UserDerivativeRights" /&gt;&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetId"&gt;The asset id.&lt;/param&gt;
            &lt;returns&gt;A List&amp;lt;&lt;see cref="T:DataContract.Asset.UserDerivativeRights" /&gt;&amp;gt;&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;: the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; ViewDerivativeRights&lt;/c&gt;.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;GetDerivativeRights&lt;/c&gt;
            &lt;code&gt;// Get rights to asset derivatives for asset 123.
            .
            int assetId = 123;
            List&amp;lt;UserDerivativeRights&amp;gt; userDerivativeRights = PictureparkService.GetDerivativeRights(coreInfo, assetId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/GetDerivativeRights" message="tns:IExtendedPublicService_GetDerivativeRights_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/GetDerivativeRightsResponse" message="tns:IExtendedPublicService_GetDerivativeRights_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/GetDerivativeRightsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetDerivativeRights_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetAssetRights">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get access rights to assets for all user groups.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetId"&gt;The asset id.&lt;/param&gt;
            &lt;returns&gt;A List&amp;lt;&lt;see cref="T:DataContract.Asset.UserGroupAssetRights" /&gt;&amp;gt;&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssetRights&lt;/c&gt;
            &lt;code&gt;// Get asset rights for asset 123.
            .
            int assetId = 123;
            List&amp;lt;UserGroupAssetRights&amp;gt; userGroupAssetRights = PictureparkService.GetAssetRights(coreInfo, assetId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/GetAssetRights" message="tns:IExtendedPublicService_GetAssetRights_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/GetAssetRightsResponse" message="tns:IExtendedPublicService_GetAssetRights_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/GetAssetRightsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssetRights_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="ImportSingleAsset">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Import a single asset&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;&lt;para&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/para&gt;&lt;/param&gt;
            &lt;param name="renderingJobId"&gt;
            &lt;para&gt;The rendering job id.&lt;/para&gt;
            &lt;para&gt;Each import must be assigned to a rendering job. Call &lt;see cref="M:CreateRenderingJob()" /&gt; first to get a renderingJobId. This allows several imports to be pooled to one job.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="assetImportOptions"&gt;
            &lt;para&gt;A complex datatype for import options.&lt;/para&gt;
            &lt;para&gt;If you wish to upload by streaming (recommended), you must provide the properties ImportGuid and FileName.&lt;/para&gt;
            &lt;para&gt;See under &lt;see cref="M:TransferService.UploadFile()" /&gt; how to proceed.&lt;/para&gt;
            &lt;/param&gt;
            &lt;returns&gt;The id of the imported asset.&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;:&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.UserRight" /&gt; &lt;c&gt; CreateAssets&lt;/c&gt;;&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetContainerRight" /&gt; &lt;c&gt; AssignAssets&lt;/c&gt; for all asset containers in assetContainerIds;&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.FieldRight" /&gt; &lt;c&gt; EditFieldValues&lt;/c&gt; for all modified asset fields.&lt;/para&gt;
            &lt;para&gt; An exception is thrown, if not all required field values are present and content matches with content rules.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;ImportSingleAsset&lt;/c&gt;
            &lt;code&gt;// ---------------------------------------------------------------------------
            // EXAMPLE 1: Import asset WITHOUT STREAMING
            // ---------------------------------------------------------------------------
            .
            AssetContainerAssignmentExtended categories = new AssetContainerAssignmentExtended() { AssetContainerId = 121, AssetContainerType = AssetContainerType.Category };
            .
            List&amp;lt;FieldValue&amp;gt; fieldValues = new List&amp;lt;FieldValue&amp;gt;
            {
            .  new FieldValue {FieldId = 2,   ValueString    = "Dachs",    LanguageId = 1 },
            .  new FieldValue {FieldId = 2,   ValueString    = "Badger",   LanguageId = 2 },
            .  new FieldValue {FieldId = 2,   ValueString    = "Blaireau", LanguageId = 3 },
            .  new FieldValue {FieldId = 6,   FieldOptionId  = 291},
            .  new FieldValue {FieldId = 11,  ValueString    = "Modified by SAF" },
            .  new FieldValue {FieldId = 35,  ValueUserShort = new UserShort {UserId = coreInfo.User.UserId}},
            .  new FieldValue {FieldId = 100, ValueAssetContainerAssignment = categories}
            };
            .
            string importUrl              = "http://vit.com/test/dog.jpg";
            List&amp;lt;int&amp;gt; assetContainerIds   = new List&amp;lt;int&amp;gt; { 118 };
            int renderingJobId            = PictureparkService.CreateRenderingJob(coreInfo, RenderingClient.Import);
            int assetRightTemplateId      = 5;
            int derivativeRightTemplateId = 1;
            .
            AssetImportOptions assetImportOptions = new AssetImportOptions()
            {
            .  AssetContainerIds         = assetContainerIds,
            .  AssetRightTemplateId      = assetRightTemplateId,
            .  DerivativeRightTemplateId = derivativeRightTemplateId,
            .  FieldValues               = fieldValues,
            .  ImportUrl                 = importUrl
            };
            .
            PictureparkService.ImportSingleAsset(coreInfo, renderingJobId, assetImportOptions);
            .
            .
            // ---------------------------------------------------------------------------
            // EXAMPLE 2: Import asset BY STREAMING (you must use MTOM-binding!)
            // ---------------------------------------------------------------------------
            // Like example 1 with 2 minor modifications:
            .
            // ---------------------------
            // First step: get a guid
            // ---------------------------
            Guid? guid      = null;
            string fileName = "dog.jpg";
            using (FileStream fileStream = new FileStream(@"E:\Temp\" + fileName, FileMode.Open))
            .  guid = PictureparkServiceMtom.UploadFile(fileStream);
            .
            // ---------------------------
            // Second step: provide additional parameters ImportGuid (instead of ImportUrl) and FileName
            // ---------------------------
            AssetImportOptions assetImportOptions = new AssetImportOptions()
            {
            .  AssetContainerIds         = assetContainerIds,
            .  AssetRightTemplateId      = assetRightTemplateId,
            .  DerivativeRightTemplateId = derivativeRightTemplateId,
            .  FieldValues               = fieldValues,
            .  ImportGuid                = guid,
            .  FileName                  = fileName,
            };
            .
            PictureparkServiceMtom.ImportSingleAsset(coreInfo, renderingJobId, assetImportOptions);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/ImportSingleAsset" message="tns:IExtendedPublicService_ImportSingleAsset_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/ImportSingleAssetResponse" message="tns:IExtendedPublicService_ImportSingleAsset_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/ImportSingleAssetPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_ImportSingleAsset_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="RemoveAssetVersions">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Remove asset versions (currently: language version or slide)&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetVersions"&gt;A list of &lt;see cref="T:DataContract.Asset.AssetVersion" /&gt;s.&lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;:&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; EditVersions&lt;/c&gt; for all assets in the list;&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; EditVersions&lt;/c&gt; for all parent assets in the list.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;RemoveAssetVersions&lt;/c&gt;
            &lt;code&gt;
            List&amp;lt;AssetVersion&amp;gt; assetVersions = new List&amp;lt;AssetVersion&amp;gt;
            {
              new AssetVersion
              {
                Asset          = new AssetItem { AssetId = 45 },
                ParentAssetId  = 47,
                AssetVersionId = 62
              },
              new AssetVersion
              {
                Asset          = new AssetItem { AssetId = 44 },
                ParentAssetId  = 47,
                AssetVersionId = 63
              }
            };
            PictureparkService.RemoveAssetVersions(coreInfo, assetVersions);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/RemoveAssetVersions" message="tns:IExtendedPublicService_RemoveAssetVersions_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/RemoveAssetVersionsResponse" message="tns:IExtendedPublicService_RemoveAssetVersions_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/RemoveAssetVersionsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_RemoveAssetVersions_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="SaveDerivativeRights">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Save (modify) derivative rights&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="rightTemplateId"&gt;
            &lt;para&gt;The id of the right template.&lt;/para&gt;
            &lt;para&gt;Must be submitted even when not applied (isDerivativeRightTemplateOverridden = true).&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="isDerivativeRightTemplateOverridden"&gt;
            &lt;para&gt;If true, the right template is not used and the individual right assignments are applied instead.&lt;/para&gt;
            &lt;para&gt;If false, user groups in &lt;see cref="T:DataContract.Asset.UserGroupDerivativeRights" /&gt; are ignored and can be set to null.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="assetIds"&gt;List of asset ids.&lt;/param&gt;
            &lt;param name="userGroupDerivativeRights"&gt;List of datatype &lt;see cref="T:DataContract.Asset.UserGroupDerivativeRights" /&gt;.&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;SaveDerivativeRights&lt;/c&gt;
            &lt;code&gt;// Set derivative rights for assets 44,55,66
            .
            List&amp;lt;int&amp;gt; assetIds                       = new List&amp;lt;int&amp;gt; { 44, 55, 66 };
            bool isDerivativeRightTemplateOverridden = true;
            int rightTemplateId                      = 4;
            .
            List&amp;lt;DerivativeRight&amp;gt; derivativeRightsList = new List&amp;lt;DerivativeRight&amp;gt; { DerivativeRight.Download };
            DerivativeDefinition derivativeDefinition = new DerivativeDefinition { DerivativeDefinitionId = 7 };
            .
            Dictionary&amp;lt;DerivativeDefinition, List&amp;lt;DerivativeRight&amp;gt;&amp;gt; derivativeDef2DerivativeRights = new Dictionary&amp;lt;DerivativeDefinition, List&amp;lt;DerivativeRight&amp;gt;&amp;gt;();
            derivativeDef2DerivativeRights.Add(derivativeDefinition, derivativeRightsList);
            .
            List&amp;lt;UserGroupDerivativeRights&amp;gt; userGroupDerivativeRights = new List&amp;lt;UserGroupDerivativeRights&amp;gt;
            {
            .  new UserGroupDerivativeRights{DerivativeRights = derivativeDef2DerivativeRights, UserGroup = new UserGroupItem{UserGroupId = 22}},
            .  new UserGroupDerivativeRights{DerivativeRights = derivativeDef2DerivativeRights, UserGroup = new UserGroupItem{UserGroupId = 33}}
            };
            .
            PictureparkService.SaveDerivativeRights(coreInfo, rightTemplateId, isDerivativeRightTemplateOverridden, assetIds, userGroupDerivativeRights);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/SaveDerivativeRights" message="tns:IExtendedPublicService_SaveDerivativeRights_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/SaveDerivativeRightsResponse" message="tns:IExtendedPublicService_SaveDerivativeRights_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/SaveDerivativeRightsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_SaveDerivativeRights_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="SaveAssetsRights">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Save (modify) asset rights&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="rightTemplateId"&gt;
            &lt;para&gt;The id of the right template.&lt;/para&gt;
            &lt;para&gt;Must be submitted even when not applied (isDerivativeRightTemplateOverridden = true).&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="isAssetRightTemplateOverridden"&gt;
            &lt;para&gt;If true, the right template is not used and the individual right assignments are applied instead.&lt;/para&gt;
            &lt;para&gt;If false, user groups in &lt;see cref="T:DataContract.Asset.UserGroupAssetRights" /&gt; are ignored and can be set to null.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="assetIds"&gt;List of asset ids.&lt;/param&gt;
            &lt;param name="userGroupAssetRights"&gt;List&amp;lt;&lt;see cref="T:DataContract.Asset.UserGroupAssetRights" /&gt;&amp;gt;&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;SaveAssetsRights&lt;/c&gt;
            &lt;code&gt;// Set asset rights for assets 44,55,66
            .
            List&amp;lt;int&amp;gt; assetIds                  = new List&amp;lt;int&amp;gt; { 44, 55, 66 };
            int rightTemplateId                 = 6;
            bool isAssetRightTemplateOverridden = false;
            .
            List&amp;lt;AssetRight&amp;gt; assetRightsForGroup1 = new List&amp;lt;AssetRight&amp;gt;
            {
            .  AssetRight.List,
            .  AssetRight.ViewMetadata
            };
            
            List&amp;lt;AssetRight&amp;gt; assetRightsForGroup2 = new List&amp;lt;AssetRight&amp;gt;
            {
            .  AssetRight.List,
            .  AssetRight.ViewVersions,
            .  AssetRight.ViewJournal,
            .  AssetRight.ViewStatistics,
            .  AssetRight.ViewMetadata
            };
            .
            List&amp;lt;UserGroupAssetRights&amp;gt; userGroupAssetRights = new List&amp;lt;UserGroupAssetRights&amp;gt;
            {
            .  new UserGroupAssetRights{AssetRights = assetRightsForGroup1, UserGroup = new UserGroupItem{UserGroupId = 11}},
            .  new UserGroupAssetRights{AssetRights = assetRightsForGroup2, UserGroup = new UserGroupItem{UserGroupId = 22}}
            };
            .
            PictureparkService.SaveAssetsRights(coreInfo, rightTemplateId, isAssetRightTemplateOverridden, assetIds, userGroupAssetRights);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/SaveAssetsRights" message="tns:IExtendedPublicService_SaveAssetsRights_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/SaveAssetsRightsResponse" message="tns:IExtendedPublicService_SaveAssetsRights_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/SaveAssetsRightsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_SaveAssetsRights_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UpdateAssetMetadata">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Update asset metadata&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetId"&gt;The asset id&lt;/param&gt;
            &lt;param name="fieldValues"&gt;A list of &lt;see cref="T:DataContract.Configuration.FieldValue" /&gt;s.&lt;/param&gt;
            &lt;param name="fieldValues2Remove"&gt;A list of field values to be deleted.&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;UpdateAssetMetadata&lt;/c&gt;
            &lt;code&gt;// Combine these 3 examples to update, create and delete asset metadata with one webservice call
            //---------------------------------------------------------------------
            // Example 1 (update field values):
            //---------------------------------------------------------------------
            int assetId                           = 47;
            List&amp;lt;int&amp;gt; assetIds                    = new List&amp;lt;int&amp;gt; { assetId };
            List&amp;lt;int&amp;gt; fieldIds                    = new List&amp;lt;int&amp;gt; { 1, 6 };
            List&amp;lt;FieldValue&amp;gt; fieldValuesForUpdate = new List&amp;lt;FieldValue&amp;gt;();
            string valueString;
            int fieldOptionId;
            .
            List&amp;lt;AssetFieldValues&amp;gt; assetFieldValues = 
            .  PictureparkService.GetAssetsMetadata(coreInfo, assetIds, fieldIds);
            .
            foreach (var assetFieldValue in assetFieldValues)
            {
            .  foreach (FieldValue fieldValueForAsset in assetFieldValues.SelectMany(i =&amp;gt; i.FieldValues).ToList())
            .  {
            .    valueString = null;
            .    fieldOptionId = 0;
            .
            .    switch (fieldValueForAsset.FieldId)
            .    {
            .      case 1:   // FieldId 1: AssetName (language specific)
            .        switch (fieldValueForAsset.LanguageId)
            .        {
            .          case 1: valueString = "Alte Frau"; break;
            .          case 2: valueString = "Old woman"; break;
            .          case 3: valueString = "Vielle femme"; break;
            .        }
            .        break;
            .
            .      case 6:   // FieldId 6: Copyright
            .        fieldOptionId = 290; break;
            .    }
            .
            .    if (valueString != null)
            .    {
            .      fieldValueForAsset.ValueString = valueString;
            .      fieldValuesForUpdate.Add(fieldValueForAsset);
            .    }
            .    else if (fieldOptionId != 0)
            .    {
            .      fieldValueForAsset.FieldOptionId = fieldOptionId;
            .      fieldValuesForUpdate.Add(fieldValueForAsset);
            .    }
            .  }
            .}
            .
            PictureparkService.UpdateAssetMetadata(coreInfo, assetId, fieldValuesForUpdate, null);
            .
            .
            //---------------------------------------------------------------------
            // Example 2 (create field values):
            //---------------------------------------------------------------------
            int assetId                           = 47;
            List&amp;lt;int&amp;gt; assetIds                    = new List&amp;lt;int&amp;gt; { assetId };
            List&amp;lt;FieldValue&amp;gt; fieldValuesForUpdate = new List&amp;lt;FieldValue&amp;gt;();
            .
            fieldValuesForUpdate.Add(
              new FieldValue { FieldId = 96, ValueString = "Madagascar" });   // FieldId 96: Country
            .
            fieldValuesForUpdate.Add(
              new FieldValue { FieldId = 93, ValueDate = DateTime.Now });     // FieldId 93: ExpiryDate
            .
            fieldValuesForUpdate.Add(
              new FieldValue { FieldId = 94, ValueDateTime = DateTime.Now }); // FieldId 94: CaptureDate
            .
            PictureparkService.UpdateAssetMetadata(coreInfo, assetId, fieldValuesForUpdate, null);
            .
            .
            //---------------------------------------------------------------------
            // Example 3 (delete field values):
            //---------------------------------------------------------------------
            int assetId                         = 47;
            List&amp;lt;int&amp;gt; assetIds                  = new List&amp;lt;int&amp;gt; { assetId };
            List&amp;lt;int&amp;gt; fieldIds                  = new List&amp;lt;int&amp;gt; { 93, 97 }; // 93:ExpiryDate,  97:City
            List&amp;lt;FieldValue&amp;gt; fieldValues2Remove = new List&amp;lt;FieldValue&amp;gt;();
            .
            List&amp;lt;AssetFieldValues&amp;gt; assetFieldValues = 
            .  PictureparkService.GetAssetsMetadata(coreInfo, assetIds, fieldIds);
            .
            foreach (var assetFieldValue in assetFieldValues)
            {
            .  foreach (FieldValue fieldValueForAsset in assetFieldValues.SelectMany(i =&amp;gt; i.FieldValues).ToList())
            .  {
            .    if (fieldValueForAsset.FieldId == 93 || fieldValueForAsset.FieldId == 97)
            .      fieldValues2Remove.Add(fieldValueForAsset);
            .  }
            }
            .
            PictureparkService.UpdateAssetMetadata(coreInfo, assetId, null, fieldValues2Remove);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/UpdateAssetMetadata" message="tns:IExtendedPublicService_UpdateAssetMetadata_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/UpdateAssetMetadataResponse" message="tns:IExtendedPublicService_UpdateAssetMetadata_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/UpdateAssetMetadataPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UpdateAssetMetadata_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UpdateOriginalDerivative">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Replace the original file of an asset&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="renderingJobId"&gt;
            &lt;para&gt;The rendering job id.&lt;/para&gt;
            &lt;para&gt;Each update must be assigned to a rendering job. Call &lt;see cref="M:CreateRenderingJob()" /&gt; first to get a renderingJobId. This allows several updates to be pooled to one job.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="assetUpdateOptions"&gt;Complex data type containing multiple update parameters.&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;UpdateOriginalDerivative&lt;/c&gt;
            &lt;code&gt;
            //-------------------------------------------------------------------
            // Example 1: Upload by default binding(no streaming):
            //-------------------------------------------------------------------
            int assetId        = 49;
            int renderingJobId = PictureparkService.CreateRenderingJob(coreInfo, RenderingClient.Update);
            Uri uri            = new Uri("http://www.picturepark.com/test/xxx.jpg");
            .
            AssetUpdateOptions assetUpdateOptions = new AssetUpdateOptions()
            {
            .  AbsoluteImportFilePath = uri,
            .  AssetId = assetId
            };
            .
            PictureparkService.UpdateOriginalDerivative(coreInfo, renderingJobId, assetUpdateOptions);
            .
            //-------------------------------------------------------------------
            // Example 2: AssetUpdateOptions with additional data for history management
            //-------------------------------------------------------------------
            AssetUpdateOptions assetUpdateOptions = new AssetUpdateOptions()
            {
            .  AbsoluteImportFilePath            = uri,
            .  AssetId                           = assetId,
            .
            .  CreateHistoricVersion             = true,
            .  HistoricVersionDescription        = "Version 2012",
            .  HistoricVersionDescription4Master = "Version 2012 master",
            .  HistoricVersionName               = "Version2012",
            .  HistoricVersionName4Master        = "Version2012ForMaster",
            .  KeepAssetId4NewFileOnHistorize    = true,
            };
            .
            //-------------------------------------------------------------------
            // Example 3: Using guid and mtom
            //-------------------------------------------------------------------
            int assetId        = 49;
            string fileName    = "cactus.jpg";  // with extension!
            int renderingJobId = PublicService.CreateRenderingJob(coreInfo, RenderingClient.Update);
            Guid? guid;
            .
            using (FileStream fileStream = new FileStream(@"E:\cactus.jpg", FileMode.Open))
            .  guid = PictureparkServiceMtom.UploadFile(fileStream);
            .
            AssetUpdateOptions assetUpdateOptions = new AssetUpdateOptions()
            {
            .  AssetId               = assetId,
            .  FileName              = fileName,
            .  ImportGuid            = guid,
            .  CreateHistoricVersion = true
            };
            .
            PictureparkServiceMtom.UpdateOriginalDerivative(coreInfo, renderingJobId, assetUpdateOptions);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/UpdateOriginalDerivative" message="tns:IExtendedPublicService_UpdateOriginalDerivative_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/UpdateOriginalDerivativeResponse" message="tns:IExtendedPublicService_UpdateOriginalDerivative_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/UpdateOriginalDerivativePictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UpdateOriginalDerivative_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="CreateRenderingJob">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Creates a rendering job and returns the rendering job id, needed for some webservices like &lt;see cref="M:ImportSingleAsset()" /&gt; and &lt;see cref="M:UpdateOriginalDerivative()" /&gt;.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="renderingClient"&gt;The &lt;see cref="T:DataContract.RenderingClient"&gt;&lt;/see&gt;.&lt;/param&gt;
            &lt;returns&gt;The id of the rendering job.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;CreateRenderingJob&lt;/c&gt;
            &lt;code&gt;// Create a rendering job of type "RenderingClient.Import".
            .
            RenderingClient renderingClient = RenderingClient.Import;
            int renderingJobId = PictureparkService.CreateRenderingJob(coreInfo, renderingClient);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/CreateRenderingJob" message="tns:IExtendedPublicService_CreateRenderingJob_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/CreateRenderingJobResponse" message="tns:IExtendedPublicService_CreateRenderingJob_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/CreateRenderingJobPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_CreateRenderingJob_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="SaveDerivative">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Save (upload) a custom derivative&lt;/para&gt;
            &lt;para&gt; Custom derivatives (which must be defined in the Picturepark Management Console) are independent files, which are assigned to an asset like a regular derivative and are offered for download just like regular derivates.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="renderingJobId"&gt;
            &lt;para&gt;The rendering job id.&lt;/para&gt;
            &lt;para&gt;Call &lt;see cref="M:CreateRenderingJob()" /&gt; to get a renderingJobId. This allows several updates to be pooled to one job.&lt;/para&gt;
            &lt;/param&gt;
            &lt;param name="derivativeUpdateOptions"&gt;Complex data type containing multiple update parameters.&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;SaveDerivative&lt;/c&gt;
            &lt;code&gt;// Upload a Pdf about a green mamba to a green mamba picture 
            .
            RenderingClient renderingClient = RenderingClient.Import;
            int renderingJobId              = PictureparkService.CreateRenderingJob(coreInfo, renderingClient);
            int assetId                     = 525;  // Green mamba image
            string customDerivativePath     = @"D:\Snakes\GreenMamba.pdf";
            string fileName                 = "GreenMamba.pdf";
            int derivativeDefinitionId      = 13;   // Pdf derivative
            Guid? guid;
            .
            using (FileStream fileStream = new FileStream(customDerivativePath, FileMode.Open))
            .  guid = PictureparkServiceMtom.UploadFile(fileStream);
            .
            DerivativeUpdateOptions derivativeUpdateOptions = new DerivativeUpdateOptions()
            {
            .  AssetId                = assetId,
            .  DerivativeDefinitionId = derivativeDefinitionId,
            .  FileName               = fileName,
            .  ImportGuid             = guid
            };
            .
            PictureparkService.SaveDerivative(coreInfo, renderingJobId, derivativeUpdateOptions);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/SaveDerivative" message="tns:IExtendedPublicService_SaveDerivative_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/SaveDerivativeResponse" message="tns:IExtendedPublicService_SaveDerivative_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/SaveDerivativePictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_SaveDerivative_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="DeleteDerivative">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Delete a custom derivative (only custom derivatives may be deleted)&lt;/para&gt;
            &lt;para&gt;See &lt;see cref="M:SaveDerivative()" /&gt; on how to upload / create a custom derivative.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetId"&gt;The asset id.&lt;/param&gt;
            &lt;param name="derivativeDefinitionId"&gt;The derivative definition id.&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;DeleteDerivative&lt;/c&gt;
            &lt;code&gt;// Delete the custom derivative pdf for asset 525
            .
            int assetId                = 525; // Green mamba
            int derivativeDefinitionId = 13;  // Pdf custom derivative id
            .
            PictureparkService.DeleteDerivative(coreInfo, assetId, derivativeDefinitionId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/DeleteDerivative" message="tns:IExtendedPublicService_DeleteDerivative_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/DeleteDerivativeResponse" message="tns:IExtendedPublicService_DeleteDerivative_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/DeleteDerivativePictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_DeleteDerivative_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="AddAssets2AssetContainers">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Add (assign) assets to asset containers&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetIds"&gt;Array of asset ids.&lt;/param&gt;
            &lt;param name="assetContainerIds"&gt;Array of asset container ids.&lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;:&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; EditContainerAssignments&lt;/c&gt; for all assets;&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetContainerRight" /&gt; &lt;c&gt; AssignAssets&lt;/c&gt; for all asset containers;&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; EditContainerAssignments&lt;/c&gt; for all assigned versions of the assets.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;AddAssets2AssetContainers&lt;/c&gt;
            &lt;code&gt;// Assign assets 111 and 222 to asset containers 11, 22 and 33.
            .
            List&amp;lt;int&amp;gt; assetIds          = new List&amp;lt;int&amp;gt; {111, 222};
            List&amp;lt;int&amp;gt; assetContainerIds = new List&amp;lt;int&amp;gt; {11, 22, 33};
            .
            PictureparkService.AddAssets2AssetContainers(coreInfo, assetIds, assetContainerIds);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/AddAssets2AssetContainers" message="tns:IExtendedPublicService_AddAssets2AssetContainers_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/AddAssets2AssetContainersResponse" message="tns:IExtendedPublicService_AddAssets2AssetContainers_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/AddAssets2AssetContainersPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_AddAssets2AssetContainers_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="RemoveAssetsFromAssetContainers">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Remove (un-assign) assets from asset containers&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetIds"&gt;List of asset ids.&lt;/param&gt;
            &lt;param name="assetContainerIds"&gt;List of asset container ids.&lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;:&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; EditContainerAssignments&lt;/c&gt; for all assets;&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetContainerRight" /&gt; &lt;c&gt; AssignAssets&lt;/c&gt; for all asset containers;&lt;/para&gt;
            &lt;para&gt; &amp;gt; the user does not have the &lt;see cref="T:DataContract.AssetRight" /&gt; &lt;c&gt; EditContainerAssignments&lt;/c&gt; for all assigned versions of the assets.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;RemoveAssetsFromAssetContainers&lt;/c&gt;
            &lt;code&gt;// Remove assets 111 and 222 from asset containers 11, 22 and 33.
            .
            List&amp;lt;int&amp;gt; assetIds          = new List&amp;lt;int&amp;gt; {111, 222};
            List&amp;lt;int&amp;gt; assetContainerIds = new List&amp;lt;int&amp;gt; {11, 22, 33};
            .
            PictureparkService.RemoveAssetsFromAssetContainers(coreInfo, assetIds, assetContainerIds);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/RemoveAssetsFromAssetContainers" message="tns:IExtendedPublicService_RemoveAssetsFromAssetContainers_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/RemoveAssetsFromAssetContainersResponse" message="tns:IExtendedPublicService_RemoveAssetsFromAssetContainers_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/RemoveAssetsFromAssetContainersPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_RemoveAssetsFromAssetContainers_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UpdateAssetsMetadata">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Update metadata of several assets (batch update)&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetFieldValues"&gt;The list of &lt;see cref="!:IPublicAssetService.AssetFieldValue" /&gt;s to be updated.&lt;/param&gt;
            &lt;param name="assetFieldValues2Remove"&gt;The list of &lt;see cref="!:IPublicAssetService.AssetFieldValue" /&gt;s to be removed.&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;UpdateAssetsMetadata&lt;/c&gt;
            &lt;code&gt;// Update/add some fields and delete other fields
            List&amp;lt;AssetFieldValues&amp;gt; assetFieldValuesToChange  = new List&amp;lt;AssetFieldValues&amp;gt;();
            List&amp;lt;AssetFieldValues&amp;gt; assetFieldValuesToRemove  = new List&amp;lt;AssetFieldValues&amp;gt;();
            .
            List&amp;lt;FieldValue&amp;gt; fieldValues1 = new List&amp;lt;FieldValue&amp;gt;
            {
                new FieldValue {FieldId = 2, ValueString = "Nebel", LanguageId = 1 },
                new FieldValue {FieldId = 2, ValueString = "Fog",   LanguageId = 2 },
                new FieldValue {FieldId = 2, ValueString = "Brume", LanguageId = 3 },
                new FieldValue {FieldId = 3, ValueString = "Mr.Spock" },
                new FieldValue {FieldId = 6, FieldOptionId = 289},
                new FieldValue {FieldId = 35,ValueUserShort = new UserShort {UserId = coreInfo.User.UserId}},
            };
            .
            List&amp;lt;FieldValue&amp;gt; fieldValues2 = new List&amp;lt;FieldValue&amp;gt;
            {
                new FieldValue {FieldValueId = 1050, FieldId = 1},
                new FieldValue {FieldValueId = 1528, FieldId = 3},
            };
            .
            AssetFieldValues assetFieldValues1 = new AssetFieldValues()
            {
                AssetId = 505,
                FieldValues = fieldValues1,
                UrlThumbnailSmall = "https://picturepark.com/wp-content/uploads/2014/01/LearnDAM-Logo-150x150.png"
            };
            .
            AssetFieldValues assetFieldValues2 = new AssetFieldValues()
            {
                AssetId = 505,
                FieldValues = fieldValues2
            };
            .
            assetFieldValuesToChange.Add(assetFieldValues1);
            assetFieldValuesToRemove.Add(assetFieldValues2);
            .
            PictureparkService.UpdateAssetsMetadata(coreInfo, assetFieldValuesToChange, assetFieldValuesToRemove);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/UpdateAssetsMetadata" message="tns:IExtendedPublicService_UpdateAssetsMetadata_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/UpdateAssetsMetadataResponse" message="tns:IExtendedPublicService_UpdateAssetsMetadata_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetService/UpdateAssetsMetadataPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UpdateAssetsMetadata_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="CreateAssetContainer">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Create an asset container&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="parentAssetContainerId"&gt;The id of the asset container where the new container is created.&lt;/param&gt;
            &lt;param name="assetContainerTranslations"&gt;A list of &lt;see cref="T:DataContract.AssetContainer.AssetContainerTranslation" /&gt;s with the language specific asset container names and descriptions.&lt;/param&gt;
            &lt;returns&gt;The id of the new asset container.&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt; is thrown, if the user lacks the necessary rights.&lt;/para&gt;
            &lt;para&gt; This exception is also thrown, if the parentAssetContainerId does not exist.&lt;/para&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; FalseParameters&lt;/c&gt; is thrown, if the list of translations is incomplete.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;CreateAssetContainer&lt;/c&gt;
            &lt;code&gt;// Create an asset container with names and descriptions in 4 different languages in the parent container 48.
            .
            int parentAssetContainerId = 48;
            List&amp;lt;AssetContainerTranslation&amp;gt; assetContainerTranslations = new List&amp;lt;AssetContainerTranslation&amp;gt; 
            {
            .  new AssetContainerTranslation {Description = "Ein weisses Haus",   LanguageId = 1,  Name = "Haus"},
            .  new AssetContainerTranslation {Description = "A white house",      LanguageId = 2,  Name = "House"},
            .  new AssetContainerTranslation {Description = "Une maison blanche", LanguageId = 3,  Name = "Maison"},
            .  new AssetContainerTranslation {Description = "Una casa blanca",    LanguageId = 75, Name = "Casa"}
            };
            .
            int newAssetContainerId = PictureparkService.CreateAssetContainer(coreInfo, parentAssetContainerId, assetContainerTranslations);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/CreateAssetContainer" message="tns:IExtendedPublicService_CreateAssetContainer_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/CreateAssetContainerResponse" message="tns:IExtendedPublicService_CreateAssetContainer_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/CreateAssetContainerPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_CreateAssetContainer_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UpdateAssetContainer">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Update an asset container (modify names and descriptions)&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetContainerId"&gt;The id of the asset container.&lt;/param&gt;
            &lt;param name="assetContainerTranslations"&gt;A list of &lt;see cref="T:DataContract.AssetContainer.AssetContainerTranslation" /&gt;s with the language specific asset container names and descriptions.&lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt; is thrown, if the user lacks the necessary rights.&lt;/para&gt;
            &lt;para&gt; This exception is also thrown, if the assetContainerId does not exist.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;UpdateAssetContainer&lt;/c&gt;
            &lt;code&gt;// Update name and descriptions for asset container 121.
            .
            int parentAssetContainerId = 120;
            int assetContainerId       = 121;
            . 
            AssetContainerType? assetContainerType             = AssetContainerType.Category;
            int? openAssetContainerId                          = null;
            int totalLayers                                    = 1;
            string searchString                                = "";
            ApplicationLanguage? desiredAssetContainerLanguage = null;
            .
            List&amp;lt;AssetContainerItem&amp;gt; assetContainers = PictureparkService.GetAssetContainers
            .  (coreInfo, parentAssetContainerId, assetContainerType, openAssetContainerId, totalLayers, searchString, desiredAssetContainerLanguage);
            .
            var assetContainer = assetContainers.Where(i =&amp;gt; i.AssetContainerId == assetContainerId).Select(i =&amp;gt; i).Single();
            .
            foreach (var assetContainerTranslation in assetContainer.Translations)
            {
            .  switch (assetContainerTranslation.LanguageId)
            .  {
            .    case 1:
            .      assetContainerTranslation.Name = "Blaues Haus";
            .      assetContainerTranslation.Description = "Ein schönes blaues Haus";
            .      break;
            .    case 2:
            .      assetContainerTranslation.Name = "Blue house";
            .      assetContainerTranslation.Description = "A beautiful blue house";
            .      break;
            .    case 3:
            .      assetContainerTranslation.Name = "Maison bleue";
            .      assetContainerTranslation.Description = "Une belle maison bleue";
            .      break;
            .    case 75:
            .      assetContainerTranslation.Name = "Casa azul";
            .      assetContainerTranslation.Description = "Una bonita casa azul";
            .      break;
            .  }
            }
            .  
            PictureparkService.UpdateAssetContainer(coreInfo, assetContainerId, assetContainer.Translations);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/UpdateAssetContainer" message="tns:IExtendedPublicService_UpdateAssetContainer_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/UpdateAssetContainerResponse" message="tns:IExtendedPublicService_UpdateAssetContainer_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/UpdateAssetContainerPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UpdateAssetContainer_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="SaveAssetContainerRights">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Save the access rights for an asset container&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetContainerId"&gt;The id of the asset container.&lt;/param&gt;
            &lt;param name="rightTemplateId"&gt;The id of a right template.&lt;/param&gt;
            &lt;param name="isRightTemplateOverridden"&gt;If true, the right template is not used.&lt;/param&gt;
            &lt;param name="userGroupAssetContainerRights"&gt;The list of &lt;see cref="T:DataContract.AssetContainer.UserGroupAssetContainerRights" /&gt; which defines the rights for each usergroup in the list.&lt;/param&gt;
            &lt;param name="exceptedAssetContainerIds"&gt;A list of sub containers to be excluded (if IncludeSubAssetContainers is true )&lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt; is thrown, if the user lacks the following rights:&lt;/para&gt;
            &lt;para&gt;  &amp;gt; the &lt;see cref="T:DataContract.AssetContainerRight" /&gt; &lt;c&gt; EditAssetContainerRights&lt;/c&gt;&lt;/para&gt;
            &lt;para&gt;  &amp;gt; the &lt;see cref="T:DataContract.UserRight" /&gt; &lt;c&gt; EditRightsWithoutTemplate&lt;/c&gt; is needed in addition, if isRightTemplateOverridden is true.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;SaveAssetContainerRights&lt;/c&gt;
            &lt;code&gt;// Set rights for container 1111 (exclude sub container 2222) for user groups 55 and 66.
            .
            int assetContainerId           = 1111;
            int rightTemplateId            = 2;
            bool isRightTemplateOverridden = false;
            .
            List&amp;lt;int&amp;gt; exceptedAssetContainerIds = new List&amp;lt;int&amp;gt; {2222};
            .
            UserGroupItem userGroup55 = new UserGroupItem {UserGroupId = 55};
            UserGroupItem userGroup66 = new UserGroupItem {UserGroupId = 66};	
            .
            List&amp;lt;AssetContainerRight&amp;gt; rights4Group55 = new List&amp;lt;AssetContainerRight&amp;gt;&amp;gt;
            {
            .  AssetContainerRight.AssignAssets,
            .  AssetContainerRight.List,
            .  AssetContainerRight.ViewContent
            };
            .
            List&amp;lt;AssetContainerRight&amp;gt; rights4Group66 = new List&amp;lt;AssetContainerRight&amp;gt;
            {
            .  AssetContainerRight.AssignAssets,
            .  AssetContainerRight.CreateSubContainer,
            .  AssetContainerRight.List,
            .  AssetContainerRight.ReorderContainer,
            .  AssetContainerRight.ViewAssetContainerRights,
            .  AssetContainerRight.ViewContent
            };
            .
            List&amp;lt;UserGroupAssetContainerRights&amp;gt; userGroupAssetContainerRights = new List&amp;lt;UserGroupAssetContainerRights&amp;gt;
            {
            .  new UserGroupAssetContainerRights {AssetContainerRights = rights4Group55, IncludeSubAssetContainers = true,  UserGroup = userGroup55},
            .  new UserGroupAssetContainerRights {AssetContainerRights = rights4Group66, IncludeSubAssetContainers = false, UserGroup = userGroup66}
            };
            .
            PictureparkService.SaveAssetContainerRights(coreInfo, assetContainerId, rightTemplateId, isRightTemplateOverridden, userGroupAssetContainerRights, exceptedAssetContainerIds);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/SaveAssetContainerRights" message="tns:IExtendedPublicService_SaveAssetContainerRights_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/SaveAssetContainerRightsResponse" message="tns:IExtendedPublicService_SaveAssetContainerRights_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/SaveAssetContainerRightsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_SaveAssetContainerRights_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetAssetContainerRights">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get access rights to asset containers for all user groups.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetContainerId"&gt;The id of the asset container.&lt;/param&gt;
            &lt;returns&gt;A List&amp;lt;&lt;see cref="T:DataContract.AssetContainer.UserGroupAssetContainerRights" /&gt;&amp;gt;.&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt; is thrown, if the user lacks the &lt;see cref="T:DataContract.AssetContainerRight" /&gt; EditAssetContainerRights.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;GetAssetContainerRights&lt;/c&gt;
            &lt;code&gt;// Get asset container rights for asset container 1234.
            .
            int assetContainerId = 1234;
            List&amp;lt;UserGroupAssetContainerRights&amp;gt; userGroupAssetContainerRights = PictureparkService.GetAssetContainerRights(coreInfo, assetContainerId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/GetAssetContainerRights" message="tns:IExtendedPublicService_GetAssetContainerRights_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/GetAssetContainerRightsResponse" message="tns:IExtendedPublicService_GetAssetContainerRights_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/GetAssetContainerRightsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetAssetContainerRights_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetTotalAssets">
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/GetTotalAssets" message="tns:IExtendedPublicService_GetTotalAssets_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/GetTotalAssetsResponse" message="tns:IExtendedPublicService_GetTotalAssets_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/GetTotalAssetsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetTotalAssets_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="RemoveAssetContainer">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Remove (delete) an asset container&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetContainerId"&gt;
            &lt;para&gt;The id of the asset container.&lt;/para&gt;
            &lt;para&gt;The deletion of an asset container includes the &lt;c&gt;deletion of all sub containers!&lt;/c&gt;&lt;/para&gt;
            &lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt; is thrown, if the user lacks the necessary rights.&lt;/para&gt;
            &lt;para&gt; This exception is also thrown, if the assetContainerId does not exist.&lt;/para&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; IdNotFound&lt;/c&gt; is thrown, if the asset container does not exist.&lt;/para&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; DeletionFailure&lt;/c&gt; is thrown, if a tab is assigned to the asset container.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;RemoveAssetContainer&lt;/c&gt;
            &lt;code&gt;// Delete asset container 1234 (does not delete assets in container).
            .
            int assetId = 1234;
            PictureparkService.RemoveAssetContainer(coreInfo, assetId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/RemoveAssetContainer" message="tns:IExtendedPublicService_RemoveAssetContainer_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/RemoveAssetContainerResponse" message="tns:IExtendedPublicService_RemoveAssetContainer_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/RemoveAssetContainerPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_RemoveAssetContainer_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="MoveAssetContainer">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Move an asset container&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="sourceAssetContainerId"&gt;The id of the source asset container.&lt;/param&gt;
            &lt;param name="destinationAssetContainerId"&gt;The id of the new parent asset container.&lt;/param&gt;
            &lt;param name="insertBeforeAssetContainerId"&gt;
            &lt;para&gt;The id of the sibling container before which the source shall be inserted.&lt;/para&gt;
            &lt;para&gt;Set to 0 if you wish to insert the moved container at the last position.&lt;/para&gt;
            &lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt; is thrown, if the user lacks one of the following &lt;see cref="T:DataContract.AssetContainerRight" /&gt;s:&lt;/para&gt;
            &lt;para&gt;  &amp;gt; &lt;c&gt; Move&lt;/c&gt; for the source container;&lt;/para&gt;
            &lt;para&gt;  &amp;gt; &lt;c&gt; CreateSubContainer&lt;/c&gt; for the destination container.&lt;/para&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; IllegalAssetContainerMove&lt;/c&gt; is thrown, if the target container is a descendant of the source.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;MoveAssetContainer&lt;/c&gt;
            &lt;code&gt;// Move container 11 into container 22 in front of container 221.
            .
            int sourceAssetContainerId       = 11;
            int destinationAssetContainerId  = 22;
            int insertBeforeAssetContainerId = 221;
            .
            PictureparkService.MoveAssetContainer(coreInfo, sourceAssetContainerId, destinationAssetContainerId, insertBeforeAssetContainerId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/MoveAssetContainer" message="tns:IExtendedPublicService_MoveAssetContainer_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/MoveAssetContainerResponse" message="tns:IExtendedPublicService_MoveAssetContainer_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/MoveAssetContainerPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_MoveAssetContainer_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetFieldSetIdByFieldName">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Gets the field set ID that matches the field's name (case sensitive!).&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetContainerId"&gt;The asset container ID.&lt;/param&gt;
            &lt;param name="fieldName"&gt;The field name (case sensitive!).&lt;/param&gt;
            &lt;returns&gt;The field set ID.&lt;/returns&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/GetFieldSetIdByFieldName" message="tns:IExtendedPublicService_GetFieldSetIdByFieldName_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/GetFieldSetIdByFieldNameResponse" message="tns:IExtendedPublicService_GetFieldSetIdByFieldName_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/GetFieldSetIdByFieldNamePictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetFieldSetIdByFieldName_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UpdateFieldSetDefaultValue">
      <wsdl:documentation>&lt;summary&gt;
             &lt;para&gt;Sets default value(s) for the provided asset container ID / field set ID combination.&lt;/para&gt;
             &lt;/summary&gt;
             &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
             &lt;param name="assetContainerId"&gt;The asset container ID.&lt;/param&gt;
             &lt;param name="fieldSetId"&gt;The field set ID to apply the new default value to. It can be obtained by calling &lt;see cref="M:AssetContainerService.GetFieldSetIdByFieldName()" /&gt;&lt;/param&gt;
             &lt;param name="defaultValues"&gt;The new default value.&lt;/param&gt;
             &lt;example&gt;
             &lt;c&gt;Set default value&lt;/c&gt;
             &lt;code&gt;
             // Set the default value of the field AssetDescription to 'Default Asset Description'.
             
             var assetContainerId = 123;
             var fieldName = "AssetDescription";
             
             // Example for a non language specific string field
             var newDefaultValues = new List&amp;lt;FieldValue&amp;gt;()
                                    {
                                        new FieldValue(){ ValueString = "Default Asset Description" }
                                    };
             
             // Example for a Language specific string field
             var newDefaultValues = new List&amp;lt;FieldValue&amp;gt;()
                                    {
                                        new FieldValue(){ LanguageId = 2, ValueString = "Default Asset Description" },
                                        new FieldValue(){ LanguageId = 1, ValueString = "Standard Asset Beschreibung" }
                                    };
             
             var fieldSetId = PictureparkService.GetFieldSetIdByFieldName(coreInfo, 123, fieldName);
             PictureparkService.UpdateFieldSetDefaultValue(coreInfo, assetContainerId, fieldSetId, newFieldValues);
             
             ----------------------------------------------------------------------------------------------------------
             
             // Set the default values of the field CarColor to 'Red' and 'Green'.
             
             var assetContainerId = 987;
             var fieldName = "CarColor";
             
             // Example for a tag box
             var newDefaultValues = new List&amp;lt;FieldValue&amp;gt;()
                                    {
                                        new FieldValue(){ ValueAssetContainerId = 110 }, // Red
                                        new FieldValue(){ ValueAssetContainerId = 111 }  // Green
                                    };
            
             var fieldSetId = PictureparkService.GetFieldSetIdByFieldName(coreInfo, assetContainerId, fieldName);
             PictureparkService.UpdateFieldSetDefaultValue(coreInfo, assetContainerId, fieldSetId, newDefaultValues);
             &lt;/code&gt;
             &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/UpdateFieldSetDefaultValue" message="tns:IExtendedPublicService_UpdateFieldSetDefaultValue_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/UpdateFieldSetDefaultValueResponse" message="tns:IExtendedPublicService_UpdateFieldSetDefaultValue_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicAssetContainerService/UpdateFieldSetDefaultValuePictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UpdateFieldSetDefaultValue_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="CreateUser">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Create a user&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="userData"&gt;&lt;see cref="T:DataContract.User.UserData" /&gt; for the new user.&lt;/param&gt;
            &lt;param name="password"&gt;The password. Must have the minimum strength as defined for this customer.&lt;/param&gt;
            &lt;returns&gt;The id of the new user.&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;: the current user does not have the &lt;see cref="T:DataContract.UserGroupRight" /&gt; AssignUsers.&lt;/para&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; WeakPassword_1&lt;/c&gt;: the password is not strong enough.&lt;/para&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; EmailAlreadyInUse&lt;/c&gt;: a user with this email exists already.&lt;/para&gt;
            &lt;para&gt; An exception is thrown, if not all required field values are present and content matches with content rules.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;CreateUser&lt;/c&gt;
            &lt;code&gt;// Create a user "hansueli@huerlimann.ch" and assign this user to user groups 55 and 66.
            .
            List&amp;lt;int&amp;gt; userGroupIds = new List&amp;lt;int&amp;gt; {55,66};
            .
            UserData userData = new UserData
            {
            .  EmailAddress         = "hansueli@huerlimann.ch",
            .  CanBeInternalContact = false,
            .  CanChangeOwnProfile  = true,
            .  FirstName            = "Hans-Ueli",
            .  LastName             = "Hürlimann",
            .  Address              = "Am Abgrund 123",
            .  Zip                  = "CH-6318",
            .  City                 = "Walchwil",
            .  Phone                = "+41 11 22 333",
            .  Company              = "Fa. Hürlimann und Hürlifrau GmbH",
            .  Department           = "Sales",
            .  LanguageId           = 1,
            .  UserGroupIds         = userGroupIds
            };
            .
            string password = "mySecretPassword12345";
            .
            int newUserId   = PictureparkService.CreateUser(coreInfo, userData, password);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/CreateUser" message="tns:IExtendedPublicService_CreateUser_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/CreateUserResponse" message="tns:IExtendedPublicService_CreateUser_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/CreateUserPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_CreateUser_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetUserById">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get &lt;see cref="T:DataContract.User.UserData" /&gt; for a user&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="userId"&gt;The id of the user.&lt;/param&gt;
            &lt;returns&gt;A UserData object.&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt; is thrown, if the user lacks the &lt;see cref="T:DataContract.UserGroupRight" /&gt; &lt;c&gt; ViewUserGroup&lt;/c&gt;.&lt;/para&gt;
            &lt;para&gt; This exception is also thrown, if the user does not exist.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;GetUserById&lt;/c&gt;
            &lt;code&gt;// Get user data for user 1234.
            .
            int userId = 1234;
            UserData userData = PictureparkService.GetUserById(coreInfo, userId);&lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/GetUserById" message="tns:IExtendedPublicService_GetUserById_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/GetUserByIdResponse" message="tns:IExtendedPublicService_GetUserById_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/GetUserByIdPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetUserById_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetUsers">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get a &lt;see cref="T:DataContract.User.UserCollection" /&gt;&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="start"&gt;Optional. The row in the query, from where on to return the users. Default is 0.&lt;/param&gt;
            &lt;param name="limit"&gt;Optional. The maximal number of rows returned. Default is unlimited.&lt;/param&gt;
            &lt;param name="searchString"&gt;Optional. A search string, e.g. "berg". Leave empty, if you wish to get all users.&lt;/param&gt;
            &lt;param name="userGroupId"&gt;Optional. The id of a user group, if you wish to get only users from a certain group.&lt;/param&gt;
            &lt;param name="registrationState"&gt;Optional. The RegistrationState, if you wish to get only users with a certain regristration state.&lt;/param&gt;
            &lt;param name="renewalState"&gt;Optional. The RenewalState, if you wish to get only users with a certain renewal state.&lt;/param&gt;
            &lt;param name="sortField"&gt;Optional. A sortfield, e.g. "EmailAddress".&lt;/param&gt;
            &lt;param name="sortDirection"&gt;Optional. The SortDirection (ascending or descending), default is ascending.&lt;/param&gt;
            &lt;param name="additionalUserRightsCheck"&gt;Optional. Get only users with this UserRight.&lt;/param&gt;
            &lt;param name="additionalUserGroupRightsCheck"&gt;Optional. Get only users in groups to which the current user has a certain UserGroupRight.&lt;/param&gt;
            &lt;param name="onlyLocked"&gt;Get only locked users.&lt;/param&gt;
            &lt;param name="onlyExpired"&gt;Get only expired users.&lt;/param&gt;
            &lt;param name="onlyExpiredRenewals"&gt;Get only users with expired renewals.&lt;/param&gt;
            &lt;param name="onlyActive"&gt;Get only active users.&lt;/param&gt;
            &lt;returns&gt;&lt;see cref="T:DataContract.User.UserCollection" /&gt;&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetUsers&lt;/c&gt;
            &lt;code&gt;// Get a collection of the first 100 users which match "iller" ordered by email address.
            .
            int? start                                     = null;
            int? limit                                     = 100;
            int? userGroupId                               = null;
            string searchString                            = "iller";
            string sortField                               = "EmailAddress";
            RegistrationState? registrationState           = null;
            RenewalState? renewalState                     = null;
            SortDirection? sortDirection                   = SortDirection.Asc;
            UserRight? additionalUserRightsCheck           = null;
            UserGroupRight? additionalUserGroupRightsCheck = null;
            bool onlyLocked                                = false;
            bool onlyExpired                               = false;
            bool onlyExpiredRenewals                       = false;
            bool onlyActive                                = false;
            .
            UserCollection userCollection = PictureparkService.GetUsers
            (
            .  coreInfo,
            .  start,
            .  limit,
            .  searchString,
            .  userGroupId,
            .  registrationState,
            .  renewalState,
            .  sortField,
            .  sortDirection,
            .  additionalUserRightsCheck,
            .  additionalUserGroupRightsCheck,
            .  onlyLocked,
            .  onlyExpired,
            .  onlyExpiredRenewals,
            .  onlyActive
            );
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/GetUsers" message="tns:IExtendedPublicService_GetUsers_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/GetUsersResponse" message="tns:IExtendedPublicService_GetUsers_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/GetUsersPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetUsers_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="RemoveUsers">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Remove (delete) users&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="userIds"&gt;A list of user ids.&lt;/param&gt;
            &lt;param name="substituteUserId"&gt;
            &lt;para&gt;If a substitute user is submitted, all references to the deleted users will be replaced by the substitute.&lt;/para&gt;
            &lt;para&gt;E.g. the substitute will be registered as the new responsible user for all assets, for which the deleted users had been responsible before.&lt;/para&gt;
            &lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; UserNotFound&lt;/c&gt;&lt;/para&gt;
            &lt;para&gt; &amp;gt; one of the users to be deleted is not found.&lt;/para&gt;
            &lt;para&gt; &amp;gt; the substitute user is not found.&lt;/para&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;: the user does not have the &lt;see cref="T:DataContract.UserGroupRight" /&gt; &lt;c&gt; EditUsers&lt;/c&gt;.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;RemoveUsers&lt;/c&gt;
            &lt;code&gt;// Delete users 55,66,77 and set the user 99 as the new responsible user.
            .
            List&amp;lt;int&amp;gt; userIds = new List&amp;lt;int&amp;gt; {55,66,77};
            int? substituteUserId = 99;
            .
            PictureparkService.RemoveUsers(coreInfo, userIds, substituteUserId);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/RemoveUsers" message="tns:IExtendedPublicService_RemoveUsers_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/RemoveUsersResponse" message="tns:IExtendedPublicService_RemoveUsers_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/RemoveUsersPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_RemoveUsers_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UpdateUser">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Update user data&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="userData"&gt;The (modified) &lt;see cref="T:DataContract.User.UserData" /&gt;.&lt;/param&gt;
            &lt;remarks&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; InsufficientRights&lt;/c&gt;&lt;/para&gt;
            &lt;para&gt; &amp;gt; the current user does not have the &lt;see cref="T:DataContract.UserGroupRight" /&gt; &lt;c&gt; EditUsers&lt;/c&gt; for the update user.&lt;/para&gt;
            &lt;para&gt; &amp;gt; the current user does not have the &lt;see cref="T:DataContract.UserGroupRight" /&gt; &lt;c&gt; AssignUsers&lt;/c&gt; for all user groups to which the update user is assigned.&lt;/para&gt;
            &lt;para&gt; &lt;see cref="T:DataContract.PictureparkErrorType" /&gt; &lt;c&gt; EmailAlreadyInUse&lt;/c&gt;: the email has been changed and a user with this email exists already.&lt;/para&gt;
            &lt;para&gt; An exception is thrown, if not all required field values are present and content matches with content rules.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;UpdateUser&lt;/c&gt;
            &lt;code&gt;// Update user data for user 55.
            .
            int userId        = 55;
            UserData userData = PictureparkService.GetUserById(coreInfo, userId);
            userData.City     = "Aarau";
            userData.Zip      = "5000";
            .
            PictureparkService.UpdateUser(coreInfo, userData);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/UpdateUser" message="tns:IExtendedPublicService_UpdateUser_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/UpdateUserResponse" message="tns:IExtendedPublicService_UpdateUser_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/UpdateUserPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UpdateUser_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetRights">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Get a collection of rights for the current user&lt;/para&gt;
            &lt;para&gt;The returned &lt;see cref="T:DataContract.User.Rights" /&gt; contain:  DerivativeDefinitionRights, FieldRights, UserRights, UserGroupRights and RightTemplates.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;returns&gt;The rights for a user&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;GetRights&lt;/c&gt;
            &lt;code&gt;// Get a collection of all rights. 
            .
            Rights rights = PictureparkService.GetRights(coreInfo);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/GetRights" message="tns:IExtendedPublicService_GetRights_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/GetRightsResponse" message="tns:IExtendedPublicService_GetRights_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicUserService/GetRightsPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_GetRights_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="CreateTraceJob">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Creates a trace job and returns the trace job id, sometimes needed for some webservices like CreateSession.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="traceJobType"&gt;The &lt;see cref="T:DataContract.TraceJobType"&gt;&lt;/see&gt;.&lt;/param&gt;
            &lt;returns&gt;The id of the trace job.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;CreateTraceJob&lt;/c&gt;
            &lt;code&gt;// Create a trace job of type TraceJobType.AssetImport.
            .
            TraceJobType traceJobType = TraceJobType.AssetImport;
            int traceJobId            = PictureparkService.CreateTraceJob(coreInfo, traceJobType);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicTracingService/CreateTraceJob" message="tns:IExtendedPublicService_CreateTraceJob_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicTracingService/CreateTraceJobResponse" message="tns:IExtendedPublicService_CreateTraceJob_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicTracingService/CreateTraceJobPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_CreateTraceJob_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UploadFile">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Upload a file by streaming&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="stream"&gt;A file stream&lt;/param&gt;
            &lt;returns&gt;The guid of the uploaded file, which must then be submitted to ImportSingleAsset.&lt;/returns&gt;
            &lt;remarks&gt;
            &lt;para&gt;Uploading by streaming is the preferred method for performance reasons and should be used if available.&lt;/para&gt;
            &lt;para&gt;In order to use streaming you must use the &lt;c&gt;mtom binding&lt;/c&gt; (see example).&lt;/para&gt;
            &lt;para&gt;The mtom bindung can be used for all webservices. No need to use the default binding, if mtom is available.&lt;/para&gt;
            &lt;para&gt;See under &lt;see cref="M:AssetService.ImportSingleAsset()" /&gt; how to use the guid.&lt;/para&gt;
            &lt;/remarks&gt;
            &lt;example&gt;
            &lt;c&gt;UploadFile&lt;/c&gt;
            &lt;code&gt;// Upload a file by streaming and then use the guid to import an asset.
            .
            // Create mtom binding
            ExtendedPublicServiceClient PictureparkServiceMtom = new ExtendedPublicServiceClient("Mtom");
            .
            Guid? guid = null;
            using (FileStream fileStream = new FileStream(@"E:\Temp\dog.jpg", FileMode.Open))
            .  guid = PictureparkServiceMtom.UploadFile(fileStream);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicTransferService/UploadFile" message="tns:IExtendedPublicService_UploadFile_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicTransferService/UploadFileResponse" message="tns:IExtendedPublicService_UploadFile_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicTransferService/UploadFilePictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UploadFile_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UploadFirstChunk">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Upload file by chunks. Use this method to upload the first chunk.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="buffer"&gt;The buffer containing the first chunk.&lt;/param&gt;
            &lt;returns&gt;The guid to upload the remaining chunks by calling &lt;see cref="M:UploadChunk()" /&gt;. This is also the guid which must then be submitted to ImportSingleAsset call.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;UploadFirstChunk&lt;/c&gt;
            &lt;code&gt;// Upload the first chunk of a file by streaming and then use the guid to upload the rest in chunks by calling UploadChunk().
            .
            Guid? guid          = null;
            string filePath     = @"D:\TheSlip.jpg";
            int chunkSizeInByte = 100000;
            byte[] chunkBuffer  = new byte[chunkSizeInByte]; 
            .
            using (FileStream fileStream = new FileStream(filePath, FileMode.Open))
            .  fileStream.Read(chunkBuffer, 0, chunkSizeInByte);
            .
            guid = PictureparkService.UploadFirstChunk(coreInfo, chunkBuffer);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicTransferService/UploadFirstChunk" message="tns:IExtendedPublicService_UploadFirstChunk_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicTransferService/UploadFirstChunkResponse" message="tns:IExtendedPublicService_UploadFirstChunk_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicTransferService/UploadFirstChunkPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UploadFirstChunk_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UploadChunk">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Upload file by chunks. Use this method to upload the remaining chunks following the first chunk uploaded by &lt;see cref="M:UploadFirstChunk()" /&gt;.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="transferGuid"&gt;The guid which has been returned by &lt;see cref="M:UploadFirstChunk()" /&gt;&lt;/param&gt;
            &lt;param name="buffer"&gt;The buffer containing the chunk&lt;/param&gt;
            &lt;param name="offset"&gt;The start index of the current chunk in the source/destination file.&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;UploadChunk&lt;/c&gt;
            &lt;code&gt;// Upload the first chunk of a file by streaming and then use the guid to upload the rest in chunks.
            .
            string filePath = @"D:\TheSlip.jpg";
            .
            int chunkSizeInByte = 1024 * 1024 * 10;
            Guid transferGuid   = Guid.Empty;
            .
            using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            {
            	byte[] transferBuffer;
            	byte[] chunkBuffer = new byte[chunkSizeInByte];
            	long bytesToRead   = fileStream.Length;
            	long bytesRead     = 0;
            	int bytesInBuffer;
            .
            	while (bytesToRead &amp;gt; 0)
            	{
            		bytesInBuffer = fileStream.Read(chunkBuffer, 0, chunkSizeInByte);
            . 
            		if (bytesInBuffer == 0)
            			break;
            .
            		transferBuffer = chunkBuffer;
            .
            		if (bytesInBuffer &amp;lt; chunkSizeInByte)
            		{
            			transferBuffer = new Byte[bytesInBuffer];
            			Buffer.BlockCopy(chunkBuffer, 0, transferBuffer, 0, bytesInBuffer);
            		}
            .
            		if (bytesRead == 0)
            			transferGuid = PictureparkService.UploadFirstChunk(coreInfo, transferBuffer);
            		else
            			PictureparkService.UploadChunk(coreInfo, transferGuid, transferBuffer, bytesRead);
            .
            		bytesRead += bytesInBuffer;
            		bytesToRead -= bytesInBuffer;
            	}
            }
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicTransferService/UploadChunk" message="tns:IExtendedPublicService_UploadChunk_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicTransferService/UploadChunkResponse" message="tns:IExtendedPublicService_UploadChunk_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicTransferService/UploadChunkPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UploadChunk_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="CreateAssetLink">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Creates a link to a business process (mailing without recipient) and returns a &lt;see cref="T:DataContract.Communication.BusinessProcessShort" /&gt; object.&lt;/para&gt;
            &lt;para&gt;Please note: The link goes always to the latest versions of the files.&lt;/para&gt;
            &lt;para&gt;There are no old versions, unless the versioning feature is used, but even then, the link will return the most actual derivatives.&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="name"&gt;The name.&lt;/param&gt;
            &lt;param name="description"&gt;The description.&lt;/param&gt;
            &lt;param name="assetSelections"&gt;A list of asset selections.&lt;/param&gt;
            &lt;param name="expirationDate"&gt;The expiry date.&lt;/param&gt;
            &lt;returns&gt;A BusinessProcessShort datatype.&lt;/returns&gt;
            &lt;example&gt;
            &lt;c&gt;CreateAssetLink&lt;/c&gt;
            &lt;code&gt;// Create an asset link for a collection of asset derivatives.
            .
            List&amp;lt;AssetSelection&amp;gt; assetSelection = new List&amp;lt;AssetSelection&amp;gt;();
            assetSelection.Add(new AssetSelection() { AssetId = 512, DerivativeDefinitionId = 7 });
            assetSelection.Add(new AssetSelection() { AssetId = 507, DerivativeDefinitionId = 8 });
            assetSelection.Add(new AssetSelection() { AssetId = 505, DerivativeDefinitionId = 6 });
            .
            DateTimeOffset expirationDate = new DateTimeOffset(2020, 7, 31, 0, 0, 0, TimeSpan.Zero);
            string assetLinkName          = "Images Collection 2014";
            string assetLinkDescription   = "Contains pictures about the latest collection.";
            .
            BusinessProcessShort assetLink = PictureparkService.CreateAssetLink(coreInfo, assetLinkName, assetLinkDescription, assetSelection, expirationDate);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicCommunicationService/CreateAssetLink" message="tns:IExtendedPublicService_CreateAssetLink_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicCommunicationService/CreateAssetLinkResponse" message="tns:IExtendedPublicService_CreateAssetLink_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicCommunicationService/CreateAssetLinkPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_CreateAssetLink_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="UpdateAssetLinks">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Update assetlinks&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="assetLinks"&gt;An array of &lt;see cref="T:DataContract.Communication.BusinessProcessShort" /&gt;.&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;UpdateAssetLinks&lt;/c&gt;
            &lt;code&gt;// Update asset links with ids 10,11,12. Please note the logic for the parameter "SelectedAssets"!
            .
            List&amp;lt;AssetSelection&amp;gt; assetSelection = new List&amp;lt;AssetSelection&amp;gt;();
            assetSelection.Add(new AssetSelection() { AssetId = 500, DerivativeDefinitionId = 7 });
            assetSelection.Add(new AssetSelection() { AssetId = 510, DerivativeDefinitionId = 6 });
            assetSelection.Add(new AssetSelection() { AssetId = 520, DerivativeDefinitionId = 1 });
            assetSelection.Add(new AssetSelection() { AssetId = 530, DerivativeDefinitionId = 8 });
            .
            List&amp;lt;BusinessProcessShort&amp;gt; assetLinks = new List&amp;lt;BusinessProcessShort&amp;gt;();
            
            // Assigned assets will not be changed, because property SelectedAssets is not defined
            BusinessProcessShort bps1 = new BusinessProcessShort()
            {
            .  BusinessProcessId   = 10,
            .  BusinessProcessType = BusinessProcessType.AssetLink,
            .  Description         = "New description of business process 10",
            .  ExpirationDate      = new DateTimeOffset(2016, 5, 31, 0, 0, 0, TimeSpan.Zero),
            .  Name                = "Business process 10 modified",
            };
            .
            // Assigned assets will be deleted, because property SelectedAssets is defined and is empty
            BusinessProcessShort bps2 = new BusinessProcessShort()
            {
            .  BusinessProcessId   = 11,
            .  BusinessProcessType = BusinessProcessType.AssetLink,
            .  Description         = "New description of business process 11",
            .  ExpirationDate      = new DateTimeOffset(2018, 11, 22, 0, 0, 0, TimeSpan.Zero),
            .  Name                = "Business process 11 modified",
            .  SelectedAssets      = new List&amp;lt;AssetSelection&amp;gt;()
            };
            .
            // Assigned assets will be replaced by assetSelection
            BusinessProcessShort bps3 = new BusinessProcessShort()
            {
            .  BusinessProcessId   = 12,
            .  BusinessProcessType = BusinessProcessType.AssetLink,
            .  Description         = "New description of business process 12",
            .  ExpirationDate      = new DateTimeOffset(2020, 9, 10, 0, 0, 0, TimeSpan.Zero),
            .  Name                = "Business process 12 modified",
            .  SelectedAssets      = assetSelection
            };
            .
            assetLinks.Add(bps1);
            assetLinks.Add(bps2);
            assetLinks.Add(bps3);
            .
            PictureparkService.UpdateAssetLinks(coreInfo, assetLinks);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicCommunicationService/UpdateAssetLinks" message="tns:IExtendedPublicService_UpdateAssetLinks_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicCommunicationService/UpdateAssetLinksResponse" message="tns:IExtendedPublicService_UpdateAssetLinks_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicCommunicationService/UpdateAssetLinksPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_UpdateAssetLinks_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="DeleteAssetLinks">
      <wsdl:documentation>&lt;summary&gt;
            &lt;para&gt;Delete assetlinks&lt;/para&gt;
            &lt;/summary&gt;
            &lt;param name="coreInfo"&gt;The CoreInfo object which has been returned by &lt;see cref="M:PublicSessionService.CreateSession()" /&gt;.&lt;/param&gt;
            &lt;param name="businessProcessIds"&gt;A list of the businessprocess ids to be deleted.&lt;/param&gt;
            &lt;example&gt;
            &lt;c&gt;DeleteAssetLinks&lt;/c&gt;
            &lt;code&gt;// Delete asset links with ids 1,2,3.
            .
            List&amp;lt;int&amp;gt; assetIds = new List&amp;lt;int&amp;gt;()  { 1, 2, 3 };
            PictureparkService.DeleteAssetLinks(coreInfo, assetIds);
            &lt;/code&gt;
            &lt;/example&gt;</wsdl:documentation>
      <wsdl:input wsaw:Action="http://www.picturepark.com/IExtendedPublicCommunicationService/DeleteAssetLinks" message="tns:IExtendedPublicService_DeleteAssetLinks_InputMessage" />
      <wsdl:output wsaw:Action="http://www.picturepark.com/IExtendedPublicCommunicationService/DeleteAssetLinksResponse" message="tns:IExtendedPublicService_DeleteAssetLinks_OutputMessage" />
      <wsdl:fault wsaw:Action="http://www.picturepark.com/IExtendedPublicCommunicationService/DeleteAssetLinksPictureparkFaultFault" name="PictureparkFaultFault" message="tns:IExtendedPublicService_DeleteAssetLinks_PictureparkFaultFault_FaultMessage" />
    </wsdl:operation>
  </wsdl:portType>
</wsdl:definitions>